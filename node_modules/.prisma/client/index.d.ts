
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Adm
 * 
 */
export type Adm = $Result.DefaultSelection<Prisma.$AdmPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Plano
 * 
 */
export type Plano = $Result.DefaultSelection<Prisma.$PlanoPayload>
/**
 * Model Caixa
 * 
 */
export type Caixa = $Result.DefaultSelection<Prisma.$CaixaPayload>
/**
 * Model Entrada
 * 
 */
export type Entrada = $Result.DefaultSelection<Prisma.$EntradaPayload>
/**
 * Model Exercicio
 * 
 */
export type Exercicio = $Result.DefaultSelection<Prisma.$ExercicioPayload>
/**
 * Model Treino
 * 
 */
export type Treino = $Result.DefaultSelection<Prisma.$TreinoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Adms
 * const adms = await prisma.adm.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Adms
   * const adms = await prisma.adm.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.adm`: Exposes CRUD operations for the **Adm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adms
    * const adms = await prisma.adm.findMany()
    * ```
    */
  get adm(): Prisma.AdmDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.plano`: Exposes CRUD operations for the **Plano** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Planos
    * const planos = await prisma.plano.findMany()
    * ```
    */
  get plano(): Prisma.PlanoDelegate<ExtArgs>;

  /**
   * `prisma.caixa`: Exposes CRUD operations for the **Caixa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Caixas
    * const caixas = await prisma.caixa.findMany()
    * ```
    */
  get caixa(): Prisma.CaixaDelegate<ExtArgs>;

  /**
   * `prisma.entrada`: Exposes CRUD operations for the **Entrada** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entradas
    * const entradas = await prisma.entrada.findMany()
    * ```
    */
  get entrada(): Prisma.EntradaDelegate<ExtArgs>;

  /**
   * `prisma.exercicio`: Exposes CRUD operations for the **Exercicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercicios
    * const exercicios = await prisma.exercicio.findMany()
    * ```
    */
  get exercicio(): Prisma.ExercicioDelegate<ExtArgs>;

  /**
   * `prisma.treino`: Exposes CRUD operations for the **Treino** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Treinos
    * const treinos = await prisma.treino.findMany()
    * ```
    */
  get treino(): Prisma.TreinoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Adm: 'Adm',
    User: 'User',
    Plano: 'Plano',
    Caixa: 'Caixa',
    Entrada: 'Entrada',
    Exercicio: 'Exercicio',
    Treino: 'Treino'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'adm' | 'user' | 'plano' | 'caixa' | 'entrada' | 'exercicio' | 'treino'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Adm: {
        payload: Prisma.$AdmPayload<ExtArgs>
        fields: Prisma.AdmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdmFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdmFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>
          }
          findFirst: {
            args: Prisma.AdmFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdmFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>
          }
          findMany: {
            args: Prisma.AdmFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>[]
          }
          create: {
            args: Prisma.AdmCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>
          }
          createMany: {
            args: Prisma.AdmCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdmCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>[]
          }
          delete: {
            args: Prisma.AdmDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>
          }
          update: {
            args: Prisma.AdmUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>
          }
          deleteMany: {
            args: Prisma.AdmDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdmUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdmUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdmPayload>
          }
          aggregate: {
            args: Prisma.AdmAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdm>
          }
          groupBy: {
            args: Prisma.AdmGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdmGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdmCountArgs<ExtArgs>,
            result: $Utils.Optional<AdmCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Plano: {
        payload: Prisma.$PlanoPayload<ExtArgs>
        fields: Prisma.PlanoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          findFirst: {
            args: Prisma.PlanoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          findMany: {
            args: Prisma.PlanoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>[]
          }
          create: {
            args: Prisma.PlanoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          createMany: {
            args: Prisma.PlanoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>[]
          }
          delete: {
            args: Prisma.PlanoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          update: {
            args: Prisma.PlanoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          deleteMany: {
            args: Prisma.PlanoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlanoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlanoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanoPayload>
          }
          aggregate: {
            args: Prisma.PlanoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlano>
          }
          groupBy: {
            args: Prisma.PlanoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlanoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanoCountArgs<ExtArgs>,
            result: $Utils.Optional<PlanoCountAggregateOutputType> | number
          }
        }
      }
      Caixa: {
        payload: Prisma.$CaixaPayload<ExtArgs>
        fields: Prisma.CaixaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaixaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaixaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>
          }
          findFirst: {
            args: Prisma.CaixaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaixaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>
          }
          findMany: {
            args: Prisma.CaixaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>[]
          }
          create: {
            args: Prisma.CaixaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>
          }
          createMany: {
            args: Prisma.CaixaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaixaCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>[]
          }
          delete: {
            args: Prisma.CaixaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>
          }
          update: {
            args: Prisma.CaixaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>
          }
          deleteMany: {
            args: Prisma.CaixaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CaixaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CaixaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CaixaPayload>
          }
          aggregate: {
            args: Prisma.CaixaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCaixa>
          }
          groupBy: {
            args: Prisma.CaixaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CaixaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaixaCountArgs<ExtArgs>,
            result: $Utils.Optional<CaixaCountAggregateOutputType> | number
          }
        }
      }
      Entrada: {
        payload: Prisma.$EntradaPayload<ExtArgs>
        fields: Prisma.EntradaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntradaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntradaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>
          }
          findFirst: {
            args: Prisma.EntradaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntradaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>
          }
          findMany: {
            args: Prisma.EntradaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>[]
          }
          create: {
            args: Prisma.EntradaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>
          }
          createMany: {
            args: Prisma.EntradaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EntradaCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>[]
          }
          delete: {
            args: Prisma.EntradaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>
          }
          update: {
            args: Prisma.EntradaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>
          }
          deleteMany: {
            args: Prisma.EntradaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EntradaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EntradaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EntradaPayload>
          }
          aggregate: {
            args: Prisma.EntradaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEntrada>
          }
          groupBy: {
            args: Prisma.EntradaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EntradaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntradaCountArgs<ExtArgs>,
            result: $Utils.Optional<EntradaCountAggregateOutputType> | number
          }
        }
      }
      Exercicio: {
        payload: Prisma.$ExercicioPayload<ExtArgs>
        fields: Prisma.ExercicioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExercicioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExercicioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>
          }
          findFirst: {
            args: Prisma.ExercicioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExercicioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>
          }
          findMany: {
            args: Prisma.ExercicioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>[]
          }
          create: {
            args: Prisma.ExercicioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>
          }
          createMany: {
            args: Prisma.ExercicioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExercicioCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>[]
          }
          delete: {
            args: Prisma.ExercicioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>
          }
          update: {
            args: Prisma.ExercicioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>
          }
          deleteMany: {
            args: Prisma.ExercicioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExercicioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExercicioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercicioPayload>
          }
          aggregate: {
            args: Prisma.ExercicioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercicio>
          }
          groupBy: {
            args: Prisma.ExercicioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExercicioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExercicioCountArgs<ExtArgs>,
            result: $Utils.Optional<ExercicioCountAggregateOutputType> | number
          }
        }
      }
      Treino: {
        payload: Prisma.$TreinoPayload<ExtArgs>
        fields: Prisma.TreinoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreinoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreinoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>
          }
          findFirst: {
            args: Prisma.TreinoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreinoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>
          }
          findMany: {
            args: Prisma.TreinoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>[]
          }
          create: {
            args: Prisma.TreinoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>
          }
          createMany: {
            args: Prisma.TreinoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreinoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>[]
          }
          delete: {
            args: Prisma.TreinoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>
          }
          update: {
            args: Prisma.TreinoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>
          }
          deleteMany: {
            args: Prisma.TreinoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TreinoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TreinoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TreinoPayload>
          }
          aggregate: {
            args: Prisma.TreinoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTreino>
          }
          groupBy: {
            args: Prisma.TreinoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TreinoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreinoCountArgs<ExtArgs>,
            result: $Utils.Optional<TreinoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlanoCountOutputType
   */

  export type PlanoCountOutputType = {
    user: number
  }

  export type PlanoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | PlanoCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * PlanoCountOutputType without action
   */
  export type PlanoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanoCountOutputType
     */
    select?: PlanoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanoCountOutputType without action
   */
  export type PlanoCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type EntradaCountOutputType
   */

  export type EntradaCountOutputType = {
    user: number
  }

  export type EntradaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | EntradaCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * EntradaCountOutputType without action
   */
  export type EntradaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntradaCountOutputType
     */
    select?: EntradaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EntradaCountOutputType without action
   */
  export type EntradaCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ExercicioCountOutputType
   */

  export type ExercicioCountOutputType = {
    treino: number
  }

  export type ExercicioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treino?: boolean | ExercicioCountOutputTypeCountTreinoArgs
  }

  // Custom InputTypes
  /**
   * ExercicioCountOutputType without action
   */
  export type ExercicioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExercicioCountOutputType
     */
    select?: ExercicioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExercicioCountOutputType without action
   */
  export type ExercicioCountOutputTypeCountTreinoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreinoWhereInput
  }


  /**
   * Count Type TreinoCountOutputType
   */

  export type TreinoCountOutputType = {
    user: number
  }

  export type TreinoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TreinoCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * TreinoCountOutputType without action
   */
  export type TreinoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreinoCountOutputType
     */
    select?: TreinoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreinoCountOutputType without action
   */
  export type TreinoCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Adm
   */

  export type AggregateAdm = {
    _count: AdmCountAggregateOutputType | null
    _min: AdmMinAggregateOutputType | null
    _max: AdmMaxAggregateOutputType | null
  }

  export type AdmMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
  }

  export type AdmMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
  }

  export type AdmCountAggregateOutputType = {
    id: number
    name: number
    email: number
    _all: number
  }


  export type AdmMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type AdmMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
  }

  export type AdmCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    _all?: true
  }

  export type AdmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Adm to aggregate.
     */
    where?: AdmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adms to fetch.
     */
    orderBy?: AdmOrderByWithRelationInput | AdmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Adms
    **/
    _count?: true | AdmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdmMaxAggregateInputType
  }

  export type GetAdmAggregateType<T extends AdmAggregateArgs> = {
        [P in keyof T & keyof AggregateAdm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdm[P]>
      : GetScalarType<T[P], AggregateAdm[P]>
  }




  export type AdmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdmWhereInput
    orderBy?: AdmOrderByWithAggregationInput | AdmOrderByWithAggregationInput[]
    by: AdmScalarFieldEnum[] | AdmScalarFieldEnum
    having?: AdmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdmCountAggregateInputType | true
    _min?: AdmMinAggregateInputType
    _max?: AdmMaxAggregateInputType
  }

  export type AdmGroupByOutputType = {
    id: string
    name: string
    email: string
    _count: AdmCountAggregateOutputType | null
    _min: AdmMinAggregateOutputType | null
    _max: AdmMaxAggregateOutputType | null
  }

  type GetAdmGroupByPayload<T extends AdmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdmGroupByOutputType[P]>
            : GetScalarType<T[P], AdmGroupByOutputType[P]>
        }
      >
    >


  export type AdmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
  }, ExtArgs["result"]["adm"]>

  export type AdmSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
  }



  export type $AdmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Adm"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
    }, ExtArgs["result"]["adm"]>
    composites: {}
  }


  type AdmGetPayload<S extends boolean | null | undefined | AdmDefaultArgs> = $Result.GetResult<Prisma.$AdmPayload, S>

  type AdmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdmFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdmCountAggregateInputType | true
    }

  export interface AdmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Adm'], meta: { name: 'Adm' } }
    /**
     * Find zero or one Adm that matches the filter.
     * @param {AdmFindUniqueArgs} args - Arguments to find a Adm
     * @example
     * // Get one Adm
     * const adm = await prisma.adm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdmFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdmFindUniqueArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Adm that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdmFindUniqueOrThrowArgs} args - Arguments to find a Adm
     * @example
     * // Get one Adm
     * const adm = await prisma.adm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdmFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdmFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Adm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdmFindFirstArgs} args - Arguments to find a Adm
     * @example
     * // Get one Adm
     * const adm = await prisma.adm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdmFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdmFindFirstArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Adm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdmFindFirstOrThrowArgs} args - Arguments to find a Adm
     * @example
     * // Get one Adm
     * const adm = await prisma.adm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdmFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdmFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Adms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdmFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adms
     * const adms = await prisma.adm.findMany()
     * 
     * // Get first 10 Adms
     * const adms = await prisma.adm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const admWithIdOnly = await prisma.adm.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdmFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdmFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Adm.
     * @param {AdmCreateArgs} args - Arguments to create a Adm.
     * @example
     * // Create one Adm
     * const Adm = await prisma.adm.create({
     *   data: {
     *     // ... data to create a Adm
     *   }
     * })
     * 
    **/
    create<T extends AdmCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdmCreateArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Adms.
     * @param {AdmCreateManyArgs} args - Arguments to create many Adms.
     * @example
     * // Create many Adms
     * const adm = await prisma.adm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AdmCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdmCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Adms and returns the data saved in the database.
     * @param {AdmCreateManyAndReturnArgs} args - Arguments to create many Adms.
     * @example
     * // Create many Adms
     * const adm = await prisma.adm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Adms and only return the `id`
     * const admWithIdOnly = await prisma.adm.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends AdmCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, AdmCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Adm.
     * @param {AdmDeleteArgs} args - Arguments to delete one Adm.
     * @example
     * // Delete one Adm
     * const Adm = await prisma.adm.delete({
     *   where: {
     *     // ... filter to delete one Adm
     *   }
     * })
     * 
    **/
    delete<T extends AdmDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdmDeleteArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Adm.
     * @param {AdmUpdateArgs} args - Arguments to update one Adm.
     * @example
     * // Update one Adm
     * const adm = await prisma.adm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdmUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdmUpdateArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Adms.
     * @param {AdmDeleteManyArgs} args - Arguments to filter Adms to delete.
     * @example
     * // Delete a few Adms
     * const { count } = await prisma.adm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdmDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdmDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adms
     * const adm = await prisma.adm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdmUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdmUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Adm.
     * @param {AdmUpsertArgs} args - Arguments to update or create a Adm.
     * @example
     * // Update or create a Adm
     * const adm = await prisma.adm.upsert({
     *   create: {
     *     // ... data to create a Adm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adm we want to update
     *   }
     * })
    **/
    upsert<T extends AdmUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdmUpsertArgs<ExtArgs>>
    ): Prisma__AdmClient<$Result.GetResult<Prisma.$AdmPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Adms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdmCountArgs} args - Arguments to filter Adms to count.
     * @example
     * // Count the number of Adms
     * const count = await prisma.adm.count({
     *   where: {
     *     // ... the filter for the Adms we want to count
     *   }
     * })
    **/
    count<T extends AdmCountArgs>(
      args?: Subset<T, AdmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdmAggregateArgs>(args: Subset<T, AdmAggregateArgs>): Prisma.PrismaPromise<GetAdmAggregateType<T>>

    /**
     * Group by Adm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdmGroupByArgs['orderBy'] }
        : { orderBy?: AdmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Adm model
   */
  readonly fields: AdmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Adm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Adm model
   */ 
  interface AdmFieldRefs {
    readonly id: FieldRef<"Adm", 'String'>
    readonly name: FieldRef<"Adm", 'String'>
    readonly email: FieldRef<"Adm", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Adm findUnique
   */
  export type AdmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * Filter, which Adm to fetch.
     */
    where: AdmWhereUniqueInput
  }

  /**
   * Adm findUniqueOrThrow
   */
  export type AdmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * Filter, which Adm to fetch.
     */
    where: AdmWhereUniqueInput
  }

  /**
   * Adm findFirst
   */
  export type AdmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * Filter, which Adm to fetch.
     */
    where?: AdmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adms to fetch.
     */
    orderBy?: AdmOrderByWithRelationInput | AdmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adms.
     */
    cursor?: AdmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adms.
     */
    distinct?: AdmScalarFieldEnum | AdmScalarFieldEnum[]
  }

  /**
   * Adm findFirstOrThrow
   */
  export type AdmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * Filter, which Adm to fetch.
     */
    where?: AdmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adms to fetch.
     */
    orderBy?: AdmOrderByWithRelationInput | AdmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Adms.
     */
    cursor?: AdmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Adms.
     */
    distinct?: AdmScalarFieldEnum | AdmScalarFieldEnum[]
  }

  /**
   * Adm findMany
   */
  export type AdmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * Filter, which Adms to fetch.
     */
    where?: AdmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Adms to fetch.
     */
    orderBy?: AdmOrderByWithRelationInput | AdmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Adms.
     */
    cursor?: AdmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Adms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Adms.
     */
    skip?: number
    distinct?: AdmScalarFieldEnum | AdmScalarFieldEnum[]
  }

  /**
   * Adm create
   */
  export type AdmCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * The data needed to create a Adm.
     */
    data: XOR<AdmCreateInput, AdmUncheckedCreateInput>
  }

  /**
   * Adm createMany
   */
  export type AdmCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Adms.
     */
    data: AdmCreateManyInput | AdmCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Adm createManyAndReturn
   */
  export type AdmCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * The data used to create many Adms.
     */
    data: AdmCreateManyInput | AdmCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Adm update
   */
  export type AdmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * The data needed to update a Adm.
     */
    data: XOR<AdmUpdateInput, AdmUncheckedUpdateInput>
    /**
     * Choose, which Adm to update.
     */
    where: AdmWhereUniqueInput
  }

  /**
   * Adm updateMany
   */
  export type AdmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Adms.
     */
    data: XOR<AdmUpdateManyMutationInput, AdmUncheckedUpdateManyInput>
    /**
     * Filter which Adms to update
     */
    where?: AdmWhereInput
  }

  /**
   * Adm upsert
   */
  export type AdmUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * The filter to search for the Adm to update in case it exists.
     */
    where: AdmWhereUniqueInput
    /**
     * In case the Adm found by the `where` argument doesn't exist, create a new Adm with this data.
     */
    create: XOR<AdmCreateInput, AdmUncheckedCreateInput>
    /**
     * In case the Adm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdmUpdateInput, AdmUncheckedUpdateInput>
  }

  /**
   * Adm delete
   */
  export type AdmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
    /**
     * Filter which Adm to delete.
     */
    where: AdmWhereUniqueInput
  }

  /**
   * Adm deleteMany
   */
  export type AdmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Adms to delete
     */
    where?: AdmWhereInput
  }

  /**
   * Adm without action
   */
  export type AdmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Adm
     */
    select?: AdmSelect<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    cpf: string | null
    email: string | null
    password: string | null
    tel: string | null
    emerg: string | null
    genero: string | null
    active: boolean | null
    mensalidade: string | null
    planoId: string | null
    entradaId: string | null
    treinoId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    cpf: string | null
    email: string | null
    password: string | null
    tel: string | null
    emerg: string | null
    genero: string | null
    active: boolean | null
    mensalidade: string | null
    planoId: string | null
    entradaId: string | null
    treinoId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    cpf: number
    email: number
    password: number
    tel: number
    emerg: number
    genero: number
    active: number
    mensalidade: number
    planoId: number
    entradaId: number
    treinoId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    email?: true
    password?: true
    tel?: true
    emerg?: true
    genero?: true
    active?: true
    mensalidade?: true
    planoId?: true
    entradaId?: true
    treinoId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    email?: true
    password?: true
    tel?: true
    emerg?: true
    genero?: true
    active?: true
    mensalidade?: true
    planoId?: true
    entradaId?: true
    treinoId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    cpf?: true
    email?: true
    password?: true
    tel?: true
    emerg?: true
    genero?: true
    active?: true
    mensalidade?: true
    planoId?: true
    entradaId?: true
    treinoId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero: string | null
    active: boolean | null
    mensalidade: string
    planoId: string | null
    entradaId: string | null
    treinoId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cpf?: boolean
    email?: boolean
    password?: boolean
    tel?: boolean
    emerg?: boolean
    genero?: boolean
    active?: boolean
    mensalidade?: boolean
    planoId?: boolean
    entradaId?: boolean
    treinoId?: boolean
    plano?: boolean | User$planoArgs<ExtArgs>
    entrada?: boolean | User$entradaArgs<ExtArgs>
    treino?: boolean | User$treinoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    cpf?: boolean
    email?: boolean
    password?: boolean
    tel?: boolean
    emerg?: boolean
    genero?: boolean
    active?: boolean
    mensalidade?: boolean
    planoId?: boolean
    entradaId?: boolean
    treinoId?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plano?: boolean | User$planoArgs<ExtArgs>
    entrada?: boolean | User$entradaArgs<ExtArgs>
    treino?: boolean | User$treinoArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      plano: Prisma.$PlanoPayload<ExtArgs> | null
      entrada: Prisma.$EntradaPayload<ExtArgs> | null
      treino: Prisma.$TreinoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      cpf: string
      email: string
      password: string
      tel: string
      emerg: string
      genero: string | null
      active: boolean | null
      mensalidade: string
      planoId: string | null
      entradaId: string | null
      treinoId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    plano<T extends User$planoArgs<ExtArgs> = {}>(args?: Subset<T, User$planoArgs<ExtArgs>>): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    entrada<T extends User$entradaArgs<ExtArgs> = {}>(args?: Subset<T, User$entradaArgs<ExtArgs>>): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    treino<T extends User$treinoArgs<ExtArgs> = {}>(args?: Subset<T, User$treinoArgs<ExtArgs>>): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly cpf: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly tel: FieldRef<"User", 'String'>
    readonly emerg: FieldRef<"User", 'String'>
    readonly genero: FieldRef<"User", 'String'>
    readonly active: FieldRef<"User", 'Boolean'>
    readonly mensalidade: FieldRef<"User", 'String'>
    readonly planoId: FieldRef<"User", 'String'>
    readonly entradaId: FieldRef<"User", 'String'>
    readonly treinoId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.plano
   */
  export type User$planoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    where?: PlanoWhereInput
  }

  /**
   * User.entrada
   */
  export type User$entradaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    where?: EntradaWhereInput
  }

  /**
   * User.treino
   */
  export type User$treinoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    where?: TreinoWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Plano
   */

  export type AggregatePlano = {
    _count: PlanoCountAggregateOutputType | null
    _avg: PlanoAvgAggregateOutputType | null
    _sum: PlanoSumAggregateOutputType | null
    _min: PlanoMinAggregateOutputType | null
    _max: PlanoMaxAggregateOutputType | null
  }

  export type PlanoAvgAggregateOutputType = {
    qtd: number | null
  }

  export type PlanoSumAggregateOutputType = {
    qtd: number | null
  }

  export type PlanoMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
    duration: string | null
    qtd: number | null
  }

  export type PlanoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
    duration: string | null
    qtd: number | null
  }

  export type PlanoCountAggregateOutputType = {
    id: number
    name: number
    value: number
    duration: number
    qtd: number
    _all: number
  }


  export type PlanoAvgAggregateInputType = {
    qtd?: true
  }

  export type PlanoSumAggregateInputType = {
    qtd?: true
  }

  export type PlanoMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    duration?: true
    qtd?: true
  }

  export type PlanoMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    duration?: true
    qtd?: true
  }

  export type PlanoCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    duration?: true
    qtd?: true
    _all?: true
  }

  export type PlanoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plano to aggregate.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Planos
    **/
    _count?: true | PlanoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanoMaxAggregateInputType
  }

  export type GetPlanoAggregateType<T extends PlanoAggregateArgs> = {
        [P in keyof T & keyof AggregatePlano]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlano[P]>
      : GetScalarType<T[P], AggregatePlano[P]>
  }




  export type PlanoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanoWhereInput
    orderBy?: PlanoOrderByWithAggregationInput | PlanoOrderByWithAggregationInput[]
    by: PlanoScalarFieldEnum[] | PlanoScalarFieldEnum
    having?: PlanoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanoCountAggregateInputType | true
    _avg?: PlanoAvgAggregateInputType
    _sum?: PlanoSumAggregateInputType
    _min?: PlanoMinAggregateInputType
    _max?: PlanoMaxAggregateInputType
  }

  export type PlanoGroupByOutputType = {
    id: string
    name: string
    value: string
    duration: string
    qtd: number | null
    _count: PlanoCountAggregateOutputType | null
    _avg: PlanoAvgAggregateOutputType | null
    _sum: PlanoSumAggregateOutputType | null
    _min: PlanoMinAggregateOutputType | null
    _max: PlanoMaxAggregateOutputType | null
  }

  type GetPlanoGroupByPayload<T extends PlanoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanoGroupByOutputType[P]>
            : GetScalarType<T[P], PlanoGroupByOutputType[P]>
        }
      >
    >


  export type PlanoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    duration?: boolean
    qtd?: boolean
    user?: boolean | Plano$userArgs<ExtArgs>
    _count?: boolean | PlanoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plano"]>

  export type PlanoSelectScalar = {
    id?: boolean
    name?: boolean
    value?: boolean
    duration?: boolean
    qtd?: boolean
  }


  export type PlanoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Plano$userArgs<ExtArgs>
    _count?: boolean | PlanoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlanoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plano"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      value: string
      duration: string
      qtd: number | null
    }, ExtArgs["result"]["plano"]>
    composites: {}
  }


  type PlanoGetPayload<S extends boolean | null | undefined | PlanoDefaultArgs> = $Result.GetResult<Prisma.$PlanoPayload, S>

  type PlanoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanoCountAggregateInputType | true
    }

  export interface PlanoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plano'], meta: { name: 'Plano' } }
    /**
     * Find zero or one Plano that matches the filter.
     * @param {PlanoFindUniqueArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlanoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoFindUniqueArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Plano that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlanoFindUniqueOrThrowArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlanoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Plano that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoFindFirstArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlanoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindFirstArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Plano that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoFindFirstOrThrowArgs} args - Arguments to find a Plano
     * @example
     * // Get one Plano
     * const plano = await prisma.plano.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlanoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Planos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Planos
     * const planos = await prisma.plano.findMany()
     * 
     * // Get first 10 Planos
     * const planos = await prisma.plano.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planoWithIdOnly = await prisma.plano.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlanoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Plano.
     * @param {PlanoCreateArgs} args - Arguments to create a Plano.
     * @example
     * // Create one Plano
     * const Plano = await prisma.plano.create({
     *   data: {
     *     // ... data to create a Plano
     *   }
     * })
     * 
    **/
    create<T extends PlanoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoCreateArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Planos.
     * @param {PlanoCreateManyArgs} args - Arguments to create many Planos.
     * @example
     * // Create many Planos
     * const plano = await prisma.plano.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PlanoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Planos and returns the data saved in the database.
     * @param {PlanoCreateManyAndReturnArgs} args - Arguments to create many Planos.
     * @example
     * // Create many Planos
     * const plano = await prisma.plano.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Planos and only return the `id`
     * const planoWithIdOnly = await prisma.plano.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PlanoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Plano.
     * @param {PlanoDeleteArgs} args - Arguments to delete one Plano.
     * @example
     * // Delete one Plano
     * const Plano = await prisma.plano.delete({
     *   where: {
     *     // ... filter to delete one Plano
     *   }
     * })
     * 
    **/
    delete<T extends PlanoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoDeleteArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Plano.
     * @param {PlanoUpdateArgs} args - Arguments to update one Plano.
     * @example
     * // Update one Plano
     * const plano = await prisma.plano.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlanoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoUpdateArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Planos.
     * @param {PlanoDeleteManyArgs} args - Arguments to filter Planos to delete.
     * @example
     * // Delete a few Planos
     * const { count } = await prisma.plano.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlanoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Planos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Planos
     * const plano = await prisma.plano.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlanoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plano.
     * @param {PlanoUpsertArgs} args - Arguments to update or create a Plano.
     * @example
     * // Update or create a Plano
     * const plano = await prisma.plano.upsert({
     *   create: {
     *     // ... data to create a Plano
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plano we want to update
     *   }
     * })
    **/
    upsert<T extends PlanoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlanoUpsertArgs<ExtArgs>>
    ): Prisma__PlanoClient<$Result.GetResult<Prisma.$PlanoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Planos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoCountArgs} args - Arguments to filter Planos to count.
     * @example
     * // Count the number of Planos
     * const count = await prisma.plano.count({
     *   where: {
     *     // ... the filter for the Planos we want to count
     *   }
     * })
    **/
    count<T extends PlanoCountArgs>(
      args?: Subset<T, PlanoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanoAggregateArgs>(args: Subset<T, PlanoAggregateArgs>): Prisma.PrismaPromise<GetPlanoAggregateType<T>>

    /**
     * Group by Plano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanoGroupByArgs['orderBy'] }
        : { orderBy?: PlanoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plano model
   */
  readonly fields: PlanoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plano.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Plano$userArgs<ExtArgs> = {}>(args?: Subset<T, Plano$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Plano model
   */ 
  interface PlanoFieldRefs {
    readonly id: FieldRef<"Plano", 'String'>
    readonly name: FieldRef<"Plano", 'String'>
    readonly value: FieldRef<"Plano", 'String'>
    readonly duration: FieldRef<"Plano", 'String'>
    readonly qtd: FieldRef<"Plano", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Plano findUnique
   */
  export type PlanoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano findUniqueOrThrow
   */
  export type PlanoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano findFirst
   */
  export type PlanoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planos.
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planos.
     */
    distinct?: PlanoScalarFieldEnum | PlanoScalarFieldEnum[]
  }

  /**
   * Plano findFirstOrThrow
   */
  export type PlanoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Plano to fetch.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planos.
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planos.
     */
    distinct?: PlanoScalarFieldEnum | PlanoScalarFieldEnum[]
  }

  /**
   * Plano findMany
   */
  export type PlanoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter, which Planos to fetch.
     */
    where?: PlanoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planos to fetch.
     */
    orderBy?: PlanoOrderByWithRelationInput | PlanoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Planos.
     */
    cursor?: PlanoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planos.
     */
    skip?: number
    distinct?: PlanoScalarFieldEnum | PlanoScalarFieldEnum[]
  }

  /**
   * Plano create
   */
  export type PlanoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * The data needed to create a Plano.
     */
    data: XOR<PlanoCreateInput, PlanoUncheckedCreateInput>
  }

  /**
   * Plano createMany
   */
  export type PlanoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Planos.
     */
    data: PlanoCreateManyInput | PlanoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plano createManyAndReturn
   */
  export type PlanoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * The data used to create many Planos.
     */
    data: PlanoCreateManyInput | PlanoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plano update
   */
  export type PlanoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * The data needed to update a Plano.
     */
    data: XOR<PlanoUpdateInput, PlanoUncheckedUpdateInput>
    /**
     * Choose, which Plano to update.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano updateMany
   */
  export type PlanoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Planos.
     */
    data: XOR<PlanoUpdateManyMutationInput, PlanoUncheckedUpdateManyInput>
    /**
     * Filter which Planos to update
     */
    where?: PlanoWhereInput
  }

  /**
   * Plano upsert
   */
  export type PlanoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * The filter to search for the Plano to update in case it exists.
     */
    where: PlanoWhereUniqueInput
    /**
     * In case the Plano found by the `where` argument doesn't exist, create a new Plano with this data.
     */
    create: XOR<PlanoCreateInput, PlanoUncheckedCreateInput>
    /**
     * In case the Plano was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanoUpdateInput, PlanoUncheckedUpdateInput>
  }

  /**
   * Plano delete
   */
  export type PlanoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
    /**
     * Filter which Plano to delete.
     */
    where: PlanoWhereUniqueInput
  }

  /**
   * Plano deleteMany
   */
  export type PlanoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Planos to delete
     */
    where?: PlanoWhereInput
  }

  /**
   * Plano.user
   */
  export type Plano$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Plano without action
   */
  export type PlanoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plano
     */
    select?: PlanoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanoInclude<ExtArgs> | null
  }


  /**
   * Model Caixa
   */

  export type AggregateCaixa = {
    _count: CaixaCountAggregateOutputType | null
    _avg: CaixaAvgAggregateOutputType | null
    _sum: CaixaSumAggregateOutputType | null
    _min: CaixaMinAggregateOutputType | null
    _max: CaixaMaxAggregateOutputType | null
  }

  export type CaixaAvgAggregateOutputType = {
    name: number | null
    aplicativo: number | null
    pix: number | null
    dinheiro: number | null
  }

  export type CaixaSumAggregateOutputType = {
    name: number | null
    aplicativo: number | null
    pix: number | null
    dinheiro: number | null
  }

  export type CaixaMinAggregateOutputType = {
    id: string | null
    name: number | null
    aplicativo: number | null
    pix: number | null
    dinheiro: number | null
  }

  export type CaixaMaxAggregateOutputType = {
    id: string | null
    name: number | null
    aplicativo: number | null
    pix: number | null
    dinheiro: number | null
  }

  export type CaixaCountAggregateOutputType = {
    id: number
    name: number
    aplicativo: number
    pix: number
    dinheiro: number
    _all: number
  }


  export type CaixaAvgAggregateInputType = {
    name?: true
    aplicativo?: true
    pix?: true
    dinheiro?: true
  }

  export type CaixaSumAggregateInputType = {
    name?: true
    aplicativo?: true
    pix?: true
    dinheiro?: true
  }

  export type CaixaMinAggregateInputType = {
    id?: true
    name?: true
    aplicativo?: true
    pix?: true
    dinheiro?: true
  }

  export type CaixaMaxAggregateInputType = {
    id?: true
    name?: true
    aplicativo?: true
    pix?: true
    dinheiro?: true
  }

  export type CaixaCountAggregateInputType = {
    id?: true
    name?: true
    aplicativo?: true
    pix?: true
    dinheiro?: true
    _all?: true
  }

  export type CaixaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Caixa to aggregate.
     */
    where?: CaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caixas to fetch.
     */
    orderBy?: CaixaOrderByWithRelationInput | CaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Caixas
    **/
    _count?: true | CaixaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaixaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaixaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaixaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaixaMaxAggregateInputType
  }

  export type GetCaixaAggregateType<T extends CaixaAggregateArgs> = {
        [P in keyof T & keyof AggregateCaixa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaixa[P]>
      : GetScalarType<T[P], AggregateCaixa[P]>
  }




  export type CaixaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaixaWhereInput
    orderBy?: CaixaOrderByWithAggregationInput | CaixaOrderByWithAggregationInput[]
    by: CaixaScalarFieldEnum[] | CaixaScalarFieldEnum
    having?: CaixaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaixaCountAggregateInputType | true
    _avg?: CaixaAvgAggregateInputType
    _sum?: CaixaSumAggregateInputType
    _min?: CaixaMinAggregateInputType
    _max?: CaixaMaxAggregateInputType
  }

  export type CaixaGroupByOutputType = {
    id: string
    name: number
    aplicativo: number | null
    pix: number | null
    dinheiro: number | null
    _count: CaixaCountAggregateOutputType | null
    _avg: CaixaAvgAggregateOutputType | null
    _sum: CaixaSumAggregateOutputType | null
    _min: CaixaMinAggregateOutputType | null
    _max: CaixaMaxAggregateOutputType | null
  }

  type GetCaixaGroupByPayload<T extends CaixaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaixaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaixaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaixaGroupByOutputType[P]>
            : GetScalarType<T[P], CaixaGroupByOutputType[P]>
        }
      >
    >


  export type CaixaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    aplicativo?: boolean
    pix?: boolean
    dinheiro?: boolean
  }, ExtArgs["result"]["caixa"]>

  export type CaixaSelectScalar = {
    id?: boolean
    name?: boolean
    aplicativo?: boolean
    pix?: boolean
    dinheiro?: boolean
  }



  export type $CaixaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Caixa"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: number
      aplicativo: number | null
      pix: number | null
      dinheiro: number | null
    }, ExtArgs["result"]["caixa"]>
    composites: {}
  }


  type CaixaGetPayload<S extends boolean | null | undefined | CaixaDefaultArgs> = $Result.GetResult<Prisma.$CaixaPayload, S>

  type CaixaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaixaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaixaCountAggregateInputType | true
    }

  export interface CaixaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Caixa'], meta: { name: 'Caixa' } }
    /**
     * Find zero or one Caixa that matches the filter.
     * @param {CaixaFindUniqueArgs} args - Arguments to find a Caixa
     * @example
     * // Get one Caixa
     * const caixa = await prisma.caixa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CaixaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CaixaFindUniqueArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Caixa that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaixaFindUniqueOrThrowArgs} args - Arguments to find a Caixa
     * @example
     * // Get one Caixa
     * const caixa = await prisma.caixa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CaixaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CaixaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Caixa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaixaFindFirstArgs} args - Arguments to find a Caixa
     * @example
     * // Get one Caixa
     * const caixa = await prisma.caixa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CaixaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CaixaFindFirstArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Caixa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaixaFindFirstOrThrowArgs} args - Arguments to find a Caixa
     * @example
     * // Get one Caixa
     * const caixa = await prisma.caixa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CaixaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CaixaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Caixas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaixaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Caixas
     * const caixas = await prisma.caixa.findMany()
     * 
     * // Get first 10 Caixas
     * const caixas = await prisma.caixa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caixaWithIdOnly = await prisma.caixa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CaixaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CaixaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Caixa.
     * @param {CaixaCreateArgs} args - Arguments to create a Caixa.
     * @example
     * // Create one Caixa
     * const Caixa = await prisma.caixa.create({
     *   data: {
     *     // ... data to create a Caixa
     *   }
     * })
     * 
    **/
    create<T extends CaixaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CaixaCreateArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Caixas.
     * @param {CaixaCreateManyArgs} args - Arguments to create many Caixas.
     * @example
     * // Create many Caixas
     * const caixa = await prisma.caixa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CaixaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CaixaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Caixas and returns the data saved in the database.
     * @param {CaixaCreateManyAndReturnArgs} args - Arguments to create many Caixas.
     * @example
     * // Create many Caixas
     * const caixa = await prisma.caixa.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Caixas and only return the `id`
     * const caixaWithIdOnly = await prisma.caixa.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CaixaCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CaixaCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Caixa.
     * @param {CaixaDeleteArgs} args - Arguments to delete one Caixa.
     * @example
     * // Delete one Caixa
     * const Caixa = await prisma.caixa.delete({
     *   where: {
     *     // ... filter to delete one Caixa
     *   }
     * })
     * 
    **/
    delete<T extends CaixaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CaixaDeleteArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Caixa.
     * @param {CaixaUpdateArgs} args - Arguments to update one Caixa.
     * @example
     * // Update one Caixa
     * const caixa = await prisma.caixa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CaixaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CaixaUpdateArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Caixas.
     * @param {CaixaDeleteManyArgs} args - Arguments to filter Caixas to delete.
     * @example
     * // Delete a few Caixas
     * const { count } = await prisma.caixa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CaixaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CaixaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Caixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaixaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Caixas
     * const caixa = await prisma.caixa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CaixaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CaixaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Caixa.
     * @param {CaixaUpsertArgs} args - Arguments to update or create a Caixa.
     * @example
     * // Update or create a Caixa
     * const caixa = await prisma.caixa.upsert({
     *   create: {
     *     // ... data to create a Caixa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Caixa we want to update
     *   }
     * })
    **/
    upsert<T extends CaixaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CaixaUpsertArgs<ExtArgs>>
    ): Prisma__CaixaClient<$Result.GetResult<Prisma.$CaixaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Caixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaixaCountArgs} args - Arguments to filter Caixas to count.
     * @example
     * // Count the number of Caixas
     * const count = await prisma.caixa.count({
     *   where: {
     *     // ... the filter for the Caixas we want to count
     *   }
     * })
    **/
    count<T extends CaixaCountArgs>(
      args?: Subset<T, CaixaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaixaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Caixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaixaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaixaAggregateArgs>(args: Subset<T, CaixaAggregateArgs>): Prisma.PrismaPromise<GetCaixaAggregateType<T>>

    /**
     * Group by Caixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaixaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaixaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaixaGroupByArgs['orderBy'] }
        : { orderBy?: CaixaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaixaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaixaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Caixa model
   */
  readonly fields: CaixaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Caixa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaixaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Caixa model
   */ 
  interface CaixaFieldRefs {
    readonly id: FieldRef<"Caixa", 'String'>
    readonly name: FieldRef<"Caixa", 'Int'>
    readonly aplicativo: FieldRef<"Caixa", 'Int'>
    readonly pix: FieldRef<"Caixa", 'Int'>
    readonly dinheiro: FieldRef<"Caixa", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Caixa findUnique
   */
  export type CaixaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * Filter, which Caixa to fetch.
     */
    where: CaixaWhereUniqueInput
  }

  /**
   * Caixa findUniqueOrThrow
   */
  export type CaixaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * Filter, which Caixa to fetch.
     */
    where: CaixaWhereUniqueInput
  }

  /**
   * Caixa findFirst
   */
  export type CaixaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * Filter, which Caixa to fetch.
     */
    where?: CaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caixas to fetch.
     */
    orderBy?: CaixaOrderByWithRelationInput | CaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Caixas.
     */
    cursor?: CaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Caixas.
     */
    distinct?: CaixaScalarFieldEnum | CaixaScalarFieldEnum[]
  }

  /**
   * Caixa findFirstOrThrow
   */
  export type CaixaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * Filter, which Caixa to fetch.
     */
    where?: CaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caixas to fetch.
     */
    orderBy?: CaixaOrderByWithRelationInput | CaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Caixas.
     */
    cursor?: CaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Caixas.
     */
    distinct?: CaixaScalarFieldEnum | CaixaScalarFieldEnum[]
  }

  /**
   * Caixa findMany
   */
  export type CaixaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * Filter, which Caixas to fetch.
     */
    where?: CaixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caixas to fetch.
     */
    orderBy?: CaixaOrderByWithRelationInput | CaixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Caixas.
     */
    cursor?: CaixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caixas.
     */
    skip?: number
    distinct?: CaixaScalarFieldEnum | CaixaScalarFieldEnum[]
  }

  /**
   * Caixa create
   */
  export type CaixaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * The data needed to create a Caixa.
     */
    data: XOR<CaixaCreateInput, CaixaUncheckedCreateInput>
  }

  /**
   * Caixa createMany
   */
  export type CaixaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Caixas.
     */
    data: CaixaCreateManyInput | CaixaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Caixa createManyAndReturn
   */
  export type CaixaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * The data used to create many Caixas.
     */
    data: CaixaCreateManyInput | CaixaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Caixa update
   */
  export type CaixaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * The data needed to update a Caixa.
     */
    data: XOR<CaixaUpdateInput, CaixaUncheckedUpdateInput>
    /**
     * Choose, which Caixa to update.
     */
    where: CaixaWhereUniqueInput
  }

  /**
   * Caixa updateMany
   */
  export type CaixaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Caixas.
     */
    data: XOR<CaixaUpdateManyMutationInput, CaixaUncheckedUpdateManyInput>
    /**
     * Filter which Caixas to update
     */
    where?: CaixaWhereInput
  }

  /**
   * Caixa upsert
   */
  export type CaixaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * The filter to search for the Caixa to update in case it exists.
     */
    where: CaixaWhereUniqueInput
    /**
     * In case the Caixa found by the `where` argument doesn't exist, create a new Caixa with this data.
     */
    create: XOR<CaixaCreateInput, CaixaUncheckedCreateInput>
    /**
     * In case the Caixa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaixaUpdateInput, CaixaUncheckedUpdateInput>
  }

  /**
   * Caixa delete
   */
  export type CaixaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
    /**
     * Filter which Caixa to delete.
     */
    where: CaixaWhereUniqueInput
  }

  /**
   * Caixa deleteMany
   */
  export type CaixaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Caixas to delete
     */
    where?: CaixaWhereInput
  }

  /**
   * Caixa without action
   */
  export type CaixaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Caixa
     */
    select?: CaixaSelect<ExtArgs> | null
  }


  /**
   * Model Entrada
   */

  export type AggregateEntrada = {
    _count: EntradaCountAggregateOutputType | null
    _avg: EntradaAvgAggregateOutputType | null
    _sum: EntradaSumAggregateOutputType | null
    _min: EntradaMinAggregateOutputType | null
    _max: EntradaMaxAggregateOutputType | null
  }

  export type EntradaAvgAggregateOutputType = {
    month: number | null
  }

  export type EntradaSumAggregateOutputType = {
    month: number | null
  }

  export type EntradaMinAggregateOutputType = {
    id: string | null
    name: string | null
    method: string | null
    date: string | null
    month: number | null
  }

  export type EntradaMaxAggregateOutputType = {
    id: string | null
    name: string | null
    method: string | null
    date: string | null
    month: number | null
  }

  export type EntradaCountAggregateOutputType = {
    id: number
    name: number
    method: number
    date: number
    month: number
    _all: number
  }


  export type EntradaAvgAggregateInputType = {
    month?: true
  }

  export type EntradaSumAggregateInputType = {
    month?: true
  }

  export type EntradaMinAggregateInputType = {
    id?: true
    name?: true
    method?: true
    date?: true
    month?: true
  }

  export type EntradaMaxAggregateInputType = {
    id?: true
    name?: true
    method?: true
    date?: true
    month?: true
  }

  export type EntradaCountAggregateInputType = {
    id?: true
    name?: true
    method?: true
    date?: true
    month?: true
    _all?: true
  }

  export type EntradaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entrada to aggregate.
     */
    where?: EntradaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entradas to fetch.
     */
    orderBy?: EntradaOrderByWithRelationInput | EntradaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntradaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entradas
    **/
    _count?: true | EntradaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntradaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntradaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntradaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntradaMaxAggregateInputType
  }

  export type GetEntradaAggregateType<T extends EntradaAggregateArgs> = {
        [P in keyof T & keyof AggregateEntrada]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntrada[P]>
      : GetScalarType<T[P], AggregateEntrada[P]>
  }




  export type EntradaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntradaWhereInput
    orderBy?: EntradaOrderByWithAggregationInput | EntradaOrderByWithAggregationInput[]
    by: EntradaScalarFieldEnum[] | EntradaScalarFieldEnum
    having?: EntradaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntradaCountAggregateInputType | true
    _avg?: EntradaAvgAggregateInputType
    _sum?: EntradaSumAggregateInputType
    _min?: EntradaMinAggregateInputType
    _max?: EntradaMaxAggregateInputType
  }

  export type EntradaGroupByOutputType = {
    id: string
    name: string
    method: string
    date: string
    month: number | null
    _count: EntradaCountAggregateOutputType | null
    _avg: EntradaAvgAggregateOutputType | null
    _sum: EntradaSumAggregateOutputType | null
    _min: EntradaMinAggregateOutputType | null
    _max: EntradaMaxAggregateOutputType | null
  }

  type GetEntradaGroupByPayload<T extends EntradaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntradaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntradaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntradaGroupByOutputType[P]>
            : GetScalarType<T[P], EntradaGroupByOutputType[P]>
        }
      >
    >


  export type EntradaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    method?: boolean
    date?: boolean
    month?: boolean
    user?: boolean | Entrada$userArgs<ExtArgs>
    _count?: boolean | EntradaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entrada"]>

  export type EntradaSelectScalar = {
    id?: boolean
    name?: boolean
    method?: boolean
    date?: boolean
    month?: boolean
  }


  export type EntradaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Entrada$userArgs<ExtArgs>
    _count?: boolean | EntradaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EntradaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entrada"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      method: string
      date: string
      month: number | null
    }, ExtArgs["result"]["entrada"]>
    composites: {}
  }


  type EntradaGetPayload<S extends boolean | null | undefined | EntradaDefaultArgs> = $Result.GetResult<Prisma.$EntradaPayload, S>

  type EntradaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EntradaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EntradaCountAggregateInputType | true
    }

  export interface EntradaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entrada'], meta: { name: 'Entrada' } }
    /**
     * Find zero or one Entrada that matches the filter.
     * @param {EntradaFindUniqueArgs} args - Arguments to find a Entrada
     * @example
     * // Get one Entrada
     * const entrada = await prisma.entrada.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EntradaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EntradaFindUniqueArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Entrada that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EntradaFindUniqueOrThrowArgs} args - Arguments to find a Entrada
     * @example
     * // Get one Entrada
     * const entrada = await prisma.entrada.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EntradaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntradaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Entrada that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradaFindFirstArgs} args - Arguments to find a Entrada
     * @example
     * // Get one Entrada
     * const entrada = await prisma.entrada.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EntradaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EntradaFindFirstArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Entrada that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradaFindFirstOrThrowArgs} args - Arguments to find a Entrada
     * @example
     * // Get one Entrada
     * const entrada = await prisma.entrada.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EntradaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EntradaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Entradas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entradas
     * const entradas = await prisma.entrada.findMany()
     * 
     * // Get first 10 Entradas
     * const entradas = await prisma.entrada.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entradaWithIdOnly = await prisma.entrada.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EntradaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntradaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Entrada.
     * @param {EntradaCreateArgs} args - Arguments to create a Entrada.
     * @example
     * // Create one Entrada
     * const Entrada = await prisma.entrada.create({
     *   data: {
     *     // ... data to create a Entrada
     *   }
     * })
     * 
    **/
    create<T extends EntradaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EntradaCreateArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Entradas.
     * @param {EntradaCreateManyArgs} args - Arguments to create many Entradas.
     * @example
     * // Create many Entradas
     * const entrada = await prisma.entrada.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EntradaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntradaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Entradas and returns the data saved in the database.
     * @param {EntradaCreateManyAndReturnArgs} args - Arguments to create many Entradas.
     * @example
     * // Create many Entradas
     * const entrada = await prisma.entrada.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Entradas and only return the `id`
     * const entradaWithIdOnly = await prisma.entrada.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends EntradaCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, EntradaCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Entrada.
     * @param {EntradaDeleteArgs} args - Arguments to delete one Entrada.
     * @example
     * // Delete one Entrada
     * const Entrada = await prisma.entrada.delete({
     *   where: {
     *     // ... filter to delete one Entrada
     *   }
     * })
     * 
    **/
    delete<T extends EntradaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EntradaDeleteArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Entrada.
     * @param {EntradaUpdateArgs} args - Arguments to update one Entrada.
     * @example
     * // Update one Entrada
     * const entrada = await prisma.entrada.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EntradaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EntradaUpdateArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Entradas.
     * @param {EntradaDeleteManyArgs} args - Arguments to filter Entradas to delete.
     * @example
     * // Delete a few Entradas
     * const { count } = await prisma.entrada.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EntradaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EntradaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entradas
     * const entrada = await prisma.entrada.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EntradaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EntradaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entrada.
     * @param {EntradaUpsertArgs} args - Arguments to update or create a Entrada.
     * @example
     * // Update or create a Entrada
     * const entrada = await prisma.entrada.upsert({
     *   create: {
     *     // ... data to create a Entrada
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entrada we want to update
     *   }
     * })
    **/
    upsert<T extends EntradaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EntradaUpsertArgs<ExtArgs>>
    ): Prisma__EntradaClient<$Result.GetResult<Prisma.$EntradaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Entradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradaCountArgs} args - Arguments to filter Entradas to count.
     * @example
     * // Count the number of Entradas
     * const count = await prisma.entrada.count({
     *   where: {
     *     // ... the filter for the Entradas we want to count
     *   }
     * })
    **/
    count<T extends EntradaCountArgs>(
      args?: Subset<T, EntradaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntradaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entrada.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntradaAggregateArgs>(args: Subset<T, EntradaAggregateArgs>): Prisma.PrismaPromise<GetEntradaAggregateType<T>>

    /**
     * Group by Entrada.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntradaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntradaGroupByArgs['orderBy'] }
        : { orderBy?: EntradaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntradaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntradaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entrada model
   */
  readonly fields: EntradaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entrada.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntradaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Entrada$userArgs<ExtArgs> = {}>(args?: Subset<T, Entrada$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Entrada model
   */ 
  interface EntradaFieldRefs {
    readonly id: FieldRef<"Entrada", 'String'>
    readonly name: FieldRef<"Entrada", 'String'>
    readonly method: FieldRef<"Entrada", 'String'>
    readonly date: FieldRef<"Entrada", 'String'>
    readonly month: FieldRef<"Entrada", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Entrada findUnique
   */
  export type EntradaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * Filter, which Entrada to fetch.
     */
    where: EntradaWhereUniqueInput
  }

  /**
   * Entrada findUniqueOrThrow
   */
  export type EntradaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * Filter, which Entrada to fetch.
     */
    where: EntradaWhereUniqueInput
  }

  /**
   * Entrada findFirst
   */
  export type EntradaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * Filter, which Entrada to fetch.
     */
    where?: EntradaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entradas to fetch.
     */
    orderBy?: EntradaOrderByWithRelationInput | EntradaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entradas.
     */
    cursor?: EntradaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entradas.
     */
    distinct?: EntradaScalarFieldEnum | EntradaScalarFieldEnum[]
  }

  /**
   * Entrada findFirstOrThrow
   */
  export type EntradaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * Filter, which Entrada to fetch.
     */
    where?: EntradaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entradas to fetch.
     */
    orderBy?: EntradaOrderByWithRelationInput | EntradaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entradas.
     */
    cursor?: EntradaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entradas.
     */
    distinct?: EntradaScalarFieldEnum | EntradaScalarFieldEnum[]
  }

  /**
   * Entrada findMany
   */
  export type EntradaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * Filter, which Entradas to fetch.
     */
    where?: EntradaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entradas to fetch.
     */
    orderBy?: EntradaOrderByWithRelationInput | EntradaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entradas.
     */
    cursor?: EntradaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entradas.
     */
    skip?: number
    distinct?: EntradaScalarFieldEnum | EntradaScalarFieldEnum[]
  }

  /**
   * Entrada create
   */
  export type EntradaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * The data needed to create a Entrada.
     */
    data: XOR<EntradaCreateInput, EntradaUncheckedCreateInput>
  }

  /**
   * Entrada createMany
   */
  export type EntradaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entradas.
     */
    data: EntradaCreateManyInput | EntradaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Entrada createManyAndReturn
   */
  export type EntradaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * The data used to create many Entradas.
     */
    data: EntradaCreateManyInput | EntradaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Entrada update
   */
  export type EntradaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * The data needed to update a Entrada.
     */
    data: XOR<EntradaUpdateInput, EntradaUncheckedUpdateInput>
    /**
     * Choose, which Entrada to update.
     */
    where: EntradaWhereUniqueInput
  }

  /**
   * Entrada updateMany
   */
  export type EntradaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entradas.
     */
    data: XOR<EntradaUpdateManyMutationInput, EntradaUncheckedUpdateManyInput>
    /**
     * Filter which Entradas to update
     */
    where?: EntradaWhereInput
  }

  /**
   * Entrada upsert
   */
  export type EntradaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * The filter to search for the Entrada to update in case it exists.
     */
    where: EntradaWhereUniqueInput
    /**
     * In case the Entrada found by the `where` argument doesn't exist, create a new Entrada with this data.
     */
    create: XOR<EntradaCreateInput, EntradaUncheckedCreateInput>
    /**
     * In case the Entrada was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntradaUpdateInput, EntradaUncheckedUpdateInput>
  }

  /**
   * Entrada delete
   */
  export type EntradaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
    /**
     * Filter which Entrada to delete.
     */
    where: EntradaWhereUniqueInput
  }

  /**
   * Entrada deleteMany
   */
  export type EntradaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entradas to delete
     */
    where?: EntradaWhereInput
  }

  /**
   * Entrada.user
   */
  export type Entrada$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Entrada without action
   */
  export type EntradaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entrada
     */
    select?: EntradaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntradaInclude<ExtArgs> | null
  }


  /**
   * Model Exercicio
   */

  export type AggregateExercicio = {
    _count: ExercicioCountAggregateOutputType | null
    _min: ExercicioMinAggregateOutputType | null
    _max: ExercicioMaxAggregateOutputType | null
  }

  export type ExercicioMinAggregateOutputType = {
    id: string | null
    name: string | null
    desc: string | null
  }

  export type ExercicioMaxAggregateOutputType = {
    id: string | null
    name: string | null
    desc: string | null
  }

  export type ExercicioCountAggregateOutputType = {
    id: number
    name: number
    desc: number
    _all: number
  }


  export type ExercicioMinAggregateInputType = {
    id?: true
    name?: true
    desc?: true
  }

  export type ExercicioMaxAggregateInputType = {
    id?: true
    name?: true
    desc?: true
  }

  export type ExercicioCountAggregateInputType = {
    id?: true
    name?: true
    desc?: true
    _all?: true
  }

  export type ExercicioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercicio to aggregate.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: ExercicioOrderByWithRelationInput | ExercicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercicios
    **/
    _count?: true | ExercicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExercicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExercicioMaxAggregateInputType
  }

  export type GetExercicioAggregateType<T extends ExercicioAggregateArgs> = {
        [P in keyof T & keyof AggregateExercicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercicio[P]>
      : GetScalarType<T[P], AggregateExercicio[P]>
  }




  export type ExercicioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExercicioWhereInput
    orderBy?: ExercicioOrderByWithAggregationInput | ExercicioOrderByWithAggregationInput[]
    by: ExercicioScalarFieldEnum[] | ExercicioScalarFieldEnum
    having?: ExercicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExercicioCountAggregateInputType | true
    _min?: ExercicioMinAggregateInputType
    _max?: ExercicioMaxAggregateInputType
  }

  export type ExercicioGroupByOutputType = {
    id: string
    name: string
    desc: string
    _count: ExercicioCountAggregateOutputType | null
    _min: ExercicioMinAggregateOutputType | null
    _max: ExercicioMaxAggregateOutputType | null
  }

  type GetExercicioGroupByPayload<T extends ExercicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExercicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExercicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExercicioGroupByOutputType[P]>
            : GetScalarType<T[P], ExercicioGroupByOutputType[P]>
        }
      >
    >


  export type ExercicioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    desc?: boolean
    treino?: boolean | Exercicio$treinoArgs<ExtArgs>
    _count?: boolean | ExercicioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercicio"]>

  export type ExercicioSelectScalar = {
    id?: boolean
    name?: boolean
    desc?: boolean
  }


  export type ExercicioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treino?: boolean | Exercicio$treinoArgs<ExtArgs>
    _count?: boolean | ExercicioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExercicioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exercicio"
    objects: {
      treino: Prisma.$TreinoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      desc: string
    }, ExtArgs["result"]["exercicio"]>
    composites: {}
  }


  type ExercicioGetPayload<S extends boolean | null | undefined | ExercicioDefaultArgs> = $Result.GetResult<Prisma.$ExercicioPayload, S>

  type ExercicioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExercicioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExercicioCountAggregateInputType | true
    }

  export interface ExercicioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercicio'], meta: { name: 'Exercicio' } }
    /**
     * Find zero or one Exercicio that matches the filter.
     * @param {ExercicioFindUniqueArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExercicioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicioFindUniqueArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercicio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExercicioFindUniqueOrThrowArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExercicioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioFindFirstArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExercicioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicioFindFirstArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercicio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioFindFirstOrThrowArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExercicioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercicios
     * const exercicios = await prisma.exercicio.findMany()
     * 
     * // Get first 10 Exercicios
     * const exercicios = await prisma.exercicio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exercicioWithIdOnly = await prisma.exercicio.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExercicioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercicio.
     * @param {ExercicioCreateArgs} args - Arguments to create a Exercicio.
     * @example
     * // Create one Exercicio
     * const Exercicio = await prisma.exercicio.create({
     *   data: {
     *     // ... data to create a Exercicio
     *   }
     * })
     * 
    **/
    create<T extends ExercicioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicioCreateArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercicios.
     * @param {ExercicioCreateManyArgs} args - Arguments to create many Exercicios.
     * @example
     * // Create many Exercicios
     * const exercicio = await prisma.exercicio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ExercicioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercicios and returns the data saved in the database.
     * @param {ExercicioCreateManyAndReturnArgs} args - Arguments to create many Exercicios.
     * @example
     * // Create many Exercicios
     * const exercicio = await prisma.exercicio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercicios and only return the `id`
     * const exercicioWithIdOnly = await prisma.exercicio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ExercicioCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicioCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Exercicio.
     * @param {ExercicioDeleteArgs} args - Arguments to delete one Exercicio.
     * @example
     * // Delete one Exercicio
     * const Exercicio = await prisma.exercicio.delete({
     *   where: {
     *     // ... filter to delete one Exercicio
     *   }
     * })
     * 
    **/
    delete<T extends ExercicioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicioDeleteArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercicio.
     * @param {ExercicioUpdateArgs} args - Arguments to update one Exercicio.
     * @example
     * // Update one Exercicio
     * const exercicio = await prisma.exercicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExercicioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicioUpdateArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercicios.
     * @param {ExercicioDeleteManyArgs} args - Arguments to filter Exercicios to delete.
     * @example
     * // Delete a few Exercicios
     * const { count } = await prisma.exercicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExercicioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercicioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercicios
     * const exercicio = await prisma.exercicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExercicioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercicio.
     * @param {ExercicioUpsertArgs} args - Arguments to update or create a Exercicio.
     * @example
     * // Update or create a Exercicio
     * const exercicio = await prisma.exercicio.upsert({
     *   create: {
     *     // ... data to create a Exercicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercicio we want to update
     *   }
     * })
    **/
    upsert<T extends ExercicioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExercicioUpsertArgs<ExtArgs>>
    ): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exercicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioCountArgs} args - Arguments to filter Exercicios to count.
     * @example
     * // Count the number of Exercicios
     * const count = await prisma.exercicio.count({
     *   where: {
     *     // ... the filter for the Exercicios we want to count
     *   }
     * })
    **/
    count<T extends ExercicioCountArgs>(
      args?: Subset<T, ExercicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExercicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExercicioAggregateArgs>(args: Subset<T, ExercicioAggregateArgs>): Prisma.PrismaPromise<GetExercicioAggregateType<T>>

    /**
     * Group by Exercicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExercicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExercicioGroupByArgs['orderBy'] }
        : { orderBy?: ExercicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExercicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercicio model
   */
  readonly fields: ExercicioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExercicioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    treino<T extends Exercicio$treinoArgs<ExtArgs> = {}>(args?: Subset<T, Exercicio$treinoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercicio model
   */ 
  interface ExercicioFieldRefs {
    readonly id: FieldRef<"Exercicio", 'String'>
    readonly name: FieldRef<"Exercicio", 'String'>
    readonly desc: FieldRef<"Exercicio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Exercicio findUnique
   */
  export type ExercicioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where: ExercicioWhereUniqueInput
  }

  /**
   * Exercicio findUniqueOrThrow
   */
  export type ExercicioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where: ExercicioWhereUniqueInput
  }

  /**
   * Exercicio findFirst
   */
  export type ExercicioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: ExercicioOrderByWithRelationInput | ExercicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercicios.
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercicios.
     */
    distinct?: ExercicioScalarFieldEnum | ExercicioScalarFieldEnum[]
  }

  /**
   * Exercicio findFirstOrThrow
   */
  export type ExercicioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: ExercicioOrderByWithRelationInput | ExercicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercicios.
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercicios.
     */
    distinct?: ExercicioScalarFieldEnum | ExercicioScalarFieldEnum[]
  }

  /**
   * Exercicio findMany
   */
  export type ExercicioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * Filter, which Exercicios to fetch.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: ExercicioOrderByWithRelationInput | ExercicioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercicios.
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    distinct?: ExercicioScalarFieldEnum | ExercicioScalarFieldEnum[]
  }

  /**
   * Exercicio create
   */
  export type ExercicioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * The data needed to create a Exercicio.
     */
    data: XOR<ExercicioCreateInput, ExercicioUncheckedCreateInput>
  }

  /**
   * Exercicio createMany
   */
  export type ExercicioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercicios.
     */
    data: ExercicioCreateManyInput | ExercicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercicio createManyAndReturn
   */
  export type ExercicioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * The data used to create many Exercicios.
     */
    data: ExercicioCreateManyInput | ExercicioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exercicio update
   */
  export type ExercicioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * The data needed to update a Exercicio.
     */
    data: XOR<ExercicioUpdateInput, ExercicioUncheckedUpdateInput>
    /**
     * Choose, which Exercicio to update.
     */
    where: ExercicioWhereUniqueInput
  }

  /**
   * Exercicio updateMany
   */
  export type ExercicioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercicios.
     */
    data: XOR<ExercicioUpdateManyMutationInput, ExercicioUncheckedUpdateManyInput>
    /**
     * Filter which Exercicios to update
     */
    where?: ExercicioWhereInput
  }

  /**
   * Exercicio upsert
   */
  export type ExercicioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * The filter to search for the Exercicio to update in case it exists.
     */
    where: ExercicioWhereUniqueInput
    /**
     * In case the Exercicio found by the `where` argument doesn't exist, create a new Exercicio with this data.
     */
    create: XOR<ExercicioCreateInput, ExercicioUncheckedCreateInput>
    /**
     * In case the Exercicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExercicioUpdateInput, ExercicioUncheckedUpdateInput>
  }

  /**
   * Exercicio delete
   */
  export type ExercicioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    /**
     * Filter which Exercicio to delete.
     */
    where: ExercicioWhereUniqueInput
  }

  /**
   * Exercicio deleteMany
   */
  export type ExercicioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercicios to delete
     */
    where?: ExercicioWhereInput
  }

  /**
   * Exercicio.treino
   */
  export type Exercicio$treinoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    where?: TreinoWhereInput
    orderBy?: TreinoOrderByWithRelationInput | TreinoOrderByWithRelationInput[]
    cursor?: TreinoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreinoScalarFieldEnum | TreinoScalarFieldEnum[]
  }

  /**
   * Exercicio without action
   */
  export type ExercicioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
  }


  /**
   * Model Treino
   */

  export type AggregateTreino = {
    _count: TreinoCountAggregateOutputType | null
    _min: TreinoMinAggregateOutputType | null
    _max: TreinoMaxAggregateOutputType | null
  }

  export type TreinoMinAggregateOutputType = {
    id: string | null
    name: string | null
    exercicioId: string | null
  }

  export type TreinoMaxAggregateOutputType = {
    id: string | null
    name: string | null
    exercicioId: string | null
  }

  export type TreinoCountAggregateOutputType = {
    id: number
    name: number
    exercicioId: number
    _all: number
  }


  export type TreinoMinAggregateInputType = {
    id?: true
    name?: true
    exercicioId?: true
  }

  export type TreinoMaxAggregateInputType = {
    id?: true
    name?: true
    exercicioId?: true
  }

  export type TreinoCountAggregateInputType = {
    id?: true
    name?: true
    exercicioId?: true
    _all?: true
  }

  export type TreinoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treino to aggregate.
     */
    where?: TreinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: TreinoOrderByWithRelationInput | TreinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Treinos
    **/
    _count?: true | TreinoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreinoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreinoMaxAggregateInputType
  }

  export type GetTreinoAggregateType<T extends TreinoAggregateArgs> = {
        [P in keyof T & keyof AggregateTreino]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreino[P]>
      : GetScalarType<T[P], AggregateTreino[P]>
  }




  export type TreinoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreinoWhereInput
    orderBy?: TreinoOrderByWithAggregationInput | TreinoOrderByWithAggregationInput[]
    by: TreinoScalarFieldEnum[] | TreinoScalarFieldEnum
    having?: TreinoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreinoCountAggregateInputType | true
    _min?: TreinoMinAggregateInputType
    _max?: TreinoMaxAggregateInputType
  }

  export type TreinoGroupByOutputType = {
    id: string
    name: string
    exercicioId: string | null
    _count: TreinoCountAggregateOutputType | null
    _min: TreinoMinAggregateOutputType | null
    _max: TreinoMaxAggregateOutputType | null
  }

  type GetTreinoGroupByPayload<T extends TreinoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreinoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreinoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreinoGroupByOutputType[P]>
            : GetScalarType<T[P], TreinoGroupByOutputType[P]>
        }
      >
    >


  export type TreinoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    exercicioId?: boolean
    user?: boolean | Treino$userArgs<ExtArgs>
    exercicio?: boolean | Treino$exercicioArgs<ExtArgs>
    _count?: boolean | TreinoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treino"]>

  export type TreinoSelectScalar = {
    id?: boolean
    name?: boolean
    exercicioId?: boolean
  }


  export type TreinoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Treino$userArgs<ExtArgs>
    exercicio?: boolean | Treino$exercicioArgs<ExtArgs>
    _count?: boolean | TreinoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TreinoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Treino"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>[]
      exercicio: Prisma.$ExercicioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      exercicioId: string | null
    }, ExtArgs["result"]["treino"]>
    composites: {}
  }


  type TreinoGetPayload<S extends boolean | null | undefined | TreinoDefaultArgs> = $Result.GetResult<Prisma.$TreinoPayload, S>

  type TreinoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TreinoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TreinoCountAggregateInputType | true
    }

  export interface TreinoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Treino'], meta: { name: 'Treino' } }
    /**
     * Find zero or one Treino that matches the filter.
     * @param {TreinoFindUniqueArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TreinoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TreinoFindUniqueArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Treino that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TreinoFindUniqueOrThrowArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TreinoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TreinoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Treino that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoFindFirstArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TreinoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TreinoFindFirstArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Treino that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoFindFirstOrThrowArgs} args - Arguments to find a Treino
     * @example
     * // Get one Treino
     * const treino = await prisma.treino.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TreinoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TreinoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Treinos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Treinos
     * const treinos = await prisma.treino.findMany()
     * 
     * // Get first 10 Treinos
     * const treinos = await prisma.treino.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treinoWithIdOnly = await prisma.treino.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TreinoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TreinoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Treino.
     * @param {TreinoCreateArgs} args - Arguments to create a Treino.
     * @example
     * // Create one Treino
     * const Treino = await prisma.treino.create({
     *   data: {
     *     // ... data to create a Treino
     *   }
     * })
     * 
    **/
    create<T extends TreinoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TreinoCreateArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Treinos.
     * @param {TreinoCreateManyArgs} args - Arguments to create many Treinos.
     * @example
     * // Create many Treinos
     * const treino = await prisma.treino.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TreinoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TreinoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Treinos and returns the data saved in the database.
     * @param {TreinoCreateManyAndReturnArgs} args - Arguments to create many Treinos.
     * @example
     * // Create many Treinos
     * const treino = await prisma.treino.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Treinos and only return the `id`
     * const treinoWithIdOnly = await prisma.treino.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends TreinoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, TreinoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Treino.
     * @param {TreinoDeleteArgs} args - Arguments to delete one Treino.
     * @example
     * // Delete one Treino
     * const Treino = await prisma.treino.delete({
     *   where: {
     *     // ... filter to delete one Treino
     *   }
     * })
     * 
    **/
    delete<T extends TreinoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TreinoDeleteArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Treino.
     * @param {TreinoUpdateArgs} args - Arguments to update one Treino.
     * @example
     * // Update one Treino
     * const treino = await prisma.treino.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TreinoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TreinoUpdateArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Treinos.
     * @param {TreinoDeleteManyArgs} args - Arguments to filter Treinos to delete.
     * @example
     * // Delete a few Treinos
     * const { count } = await prisma.treino.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TreinoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TreinoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Treinos
     * const treino = await prisma.treino.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TreinoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TreinoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Treino.
     * @param {TreinoUpsertArgs} args - Arguments to update or create a Treino.
     * @example
     * // Update or create a Treino
     * const treino = await prisma.treino.upsert({
     *   create: {
     *     // ... data to create a Treino
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Treino we want to update
     *   }
     * })
    **/
    upsert<T extends TreinoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TreinoUpsertArgs<ExtArgs>>
    ): Prisma__TreinoClient<$Result.GetResult<Prisma.$TreinoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoCountArgs} args - Arguments to filter Treinos to count.
     * @example
     * // Count the number of Treinos
     * const count = await prisma.treino.count({
     *   where: {
     *     // ... the filter for the Treinos we want to count
     *   }
     * })
    **/
    count<T extends TreinoCountArgs>(
      args?: Subset<T, TreinoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreinoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Treino.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreinoAggregateArgs>(args: Subset<T, TreinoAggregateArgs>): Prisma.PrismaPromise<GetTreinoAggregateType<T>>

    /**
     * Group by Treino.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreinoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreinoGroupByArgs['orderBy'] }
        : { orderBy?: TreinoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreinoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreinoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Treino model
   */
  readonly fields: TreinoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Treino.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreinoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Treino$userArgs<ExtArgs> = {}>(args?: Subset<T, Treino$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    exercicio<T extends Treino$exercicioArgs<ExtArgs> = {}>(args?: Subset<T, Treino$exercicioArgs<ExtArgs>>): Prisma__ExercicioClient<$Result.GetResult<Prisma.$ExercicioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Treino model
   */ 
  interface TreinoFieldRefs {
    readonly id: FieldRef<"Treino", 'String'>
    readonly name: FieldRef<"Treino", 'String'>
    readonly exercicioId: FieldRef<"Treino", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Treino findUnique
   */
  export type TreinoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * Filter, which Treino to fetch.
     */
    where: TreinoWhereUniqueInput
  }

  /**
   * Treino findUniqueOrThrow
   */
  export type TreinoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * Filter, which Treino to fetch.
     */
    where: TreinoWhereUniqueInput
  }

  /**
   * Treino findFirst
   */
  export type TreinoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * Filter, which Treino to fetch.
     */
    where?: TreinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: TreinoOrderByWithRelationInput | TreinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treinos.
     */
    cursor?: TreinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treinos.
     */
    distinct?: TreinoScalarFieldEnum | TreinoScalarFieldEnum[]
  }

  /**
   * Treino findFirstOrThrow
   */
  export type TreinoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * Filter, which Treino to fetch.
     */
    where?: TreinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: TreinoOrderByWithRelationInput | TreinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treinos.
     */
    cursor?: TreinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treinos.
     */
    distinct?: TreinoScalarFieldEnum | TreinoScalarFieldEnum[]
  }

  /**
   * Treino findMany
   */
  export type TreinoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * Filter, which Treinos to fetch.
     */
    where?: TreinoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: TreinoOrderByWithRelationInput | TreinoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Treinos.
     */
    cursor?: TreinoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    distinct?: TreinoScalarFieldEnum | TreinoScalarFieldEnum[]
  }

  /**
   * Treino create
   */
  export type TreinoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * The data needed to create a Treino.
     */
    data: XOR<TreinoCreateInput, TreinoUncheckedCreateInput>
  }

  /**
   * Treino createMany
   */
  export type TreinoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Treinos.
     */
    data: TreinoCreateManyInput | TreinoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Treino createManyAndReturn
   */
  export type TreinoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * The data used to create many Treinos.
     */
    data: TreinoCreateManyInput | TreinoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Treino update
   */
  export type TreinoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * The data needed to update a Treino.
     */
    data: XOR<TreinoUpdateInput, TreinoUncheckedUpdateInput>
    /**
     * Choose, which Treino to update.
     */
    where: TreinoWhereUniqueInput
  }

  /**
   * Treino updateMany
   */
  export type TreinoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Treinos.
     */
    data: XOR<TreinoUpdateManyMutationInput, TreinoUncheckedUpdateManyInput>
    /**
     * Filter which Treinos to update
     */
    where?: TreinoWhereInput
  }

  /**
   * Treino upsert
   */
  export type TreinoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * The filter to search for the Treino to update in case it exists.
     */
    where: TreinoWhereUniqueInput
    /**
     * In case the Treino found by the `where` argument doesn't exist, create a new Treino with this data.
     */
    create: XOR<TreinoCreateInput, TreinoUncheckedCreateInput>
    /**
     * In case the Treino was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreinoUpdateInput, TreinoUncheckedUpdateInput>
  }

  /**
   * Treino delete
   */
  export type TreinoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
    /**
     * Filter which Treino to delete.
     */
    where: TreinoWhereUniqueInput
  }

  /**
   * Treino deleteMany
   */
  export type TreinoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treinos to delete
     */
    where?: TreinoWhereInput
  }

  /**
   * Treino.user
   */
  export type Treino$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Treino.exercicio
   */
  export type Treino$exercicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExercicioInclude<ExtArgs> | null
    where?: ExercicioWhereInput
  }

  /**
   * Treino without action
   */
  export type TreinoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treino
     */
    select?: TreinoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreinoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdmScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email'
  };

  export type AdmScalarFieldEnum = (typeof AdmScalarFieldEnum)[keyof typeof AdmScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cpf: 'cpf',
    email: 'email',
    password: 'password',
    tel: 'tel',
    emerg: 'emerg',
    genero: 'genero',
    active: 'active',
    mensalidade: 'mensalidade',
    planoId: 'planoId',
    entradaId: 'entradaId',
    treinoId: 'treinoId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PlanoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    duration: 'duration',
    qtd: 'qtd'
  };

  export type PlanoScalarFieldEnum = (typeof PlanoScalarFieldEnum)[keyof typeof PlanoScalarFieldEnum]


  export const CaixaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    aplicativo: 'aplicativo',
    pix: 'pix',
    dinheiro: 'dinheiro'
  };

  export type CaixaScalarFieldEnum = (typeof CaixaScalarFieldEnum)[keyof typeof CaixaScalarFieldEnum]


  export const EntradaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    method: 'method',
    date: 'date',
    month: 'month'
  };

  export type EntradaScalarFieldEnum = (typeof EntradaScalarFieldEnum)[keyof typeof EntradaScalarFieldEnum]


  export const ExercicioScalarFieldEnum: {
    id: 'id',
    name: 'name',
    desc: 'desc'
  };

  export type ExercicioScalarFieldEnum = (typeof ExercicioScalarFieldEnum)[keyof typeof ExercicioScalarFieldEnum]


  export const TreinoScalarFieldEnum: {
    id: 'id',
    name: 'name',
    exercicioId: 'exercicioId'
  };

  export type TreinoScalarFieldEnum = (typeof TreinoScalarFieldEnum)[keyof typeof TreinoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdmWhereInput = {
    AND?: AdmWhereInput | AdmWhereInput[]
    OR?: AdmWhereInput[]
    NOT?: AdmWhereInput | AdmWhereInput[]
    id?: StringFilter<"Adm"> | string
    name?: StringFilter<"Adm"> | string
    email?: StringFilter<"Adm"> | string
  }

  export type AdmOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type AdmWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    email?: string
    AND?: AdmWhereInput | AdmWhereInput[]
    OR?: AdmWhereInput[]
    NOT?: AdmWhereInput | AdmWhereInput[]
  }, "id" | "name" | "email">

  export type AdmOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    _count?: AdmCountOrderByAggregateInput
    _max?: AdmMaxOrderByAggregateInput
    _min?: AdmMinOrderByAggregateInput
  }

  export type AdmScalarWhereWithAggregatesInput = {
    AND?: AdmScalarWhereWithAggregatesInput | AdmScalarWhereWithAggregatesInput[]
    OR?: AdmScalarWhereWithAggregatesInput[]
    NOT?: AdmScalarWhereWithAggregatesInput | AdmScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Adm"> | string
    name?: StringWithAggregatesFilter<"Adm"> | string
    email?: StringWithAggregatesFilter<"Adm"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    tel?: StringFilter<"User"> | string
    emerg?: StringFilter<"User"> | string
    genero?: StringNullableFilter<"User"> | string | null
    active?: BoolNullableFilter<"User"> | boolean | null
    mensalidade?: StringFilter<"User"> | string
    planoId?: StringNullableFilter<"User"> | string | null
    entradaId?: StringNullableFilter<"User"> | string | null
    treinoId?: StringNullableFilter<"User"> | string | null
    plano?: XOR<PlanoNullableRelationFilter, PlanoWhereInput> | null
    entrada?: XOR<EntradaNullableRelationFilter, EntradaWhereInput> | null
    treino?: XOR<TreinoNullableRelationFilter, TreinoWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tel?: SortOrder
    emerg?: SortOrder
    genero?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    mensalidade?: SortOrder
    planoId?: SortOrderInput | SortOrder
    entradaId?: SortOrderInput | SortOrder
    treinoId?: SortOrderInput | SortOrder
    plano?: PlanoOrderByWithRelationInput
    entrada?: EntradaOrderByWithRelationInput
    treino?: TreinoOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cpf?: string
    email?: string
    tel?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    emerg?: StringFilter<"User"> | string
    genero?: StringNullableFilter<"User"> | string | null
    active?: BoolNullableFilter<"User"> | boolean | null
    mensalidade?: StringFilter<"User"> | string
    planoId?: StringNullableFilter<"User"> | string | null
    entradaId?: StringNullableFilter<"User"> | string | null
    treinoId?: StringNullableFilter<"User"> | string | null
    plano?: XOR<PlanoNullableRelationFilter, PlanoWhereInput> | null
    entrada?: XOR<EntradaNullableRelationFilter, EntradaWhereInput> | null
    treino?: XOR<TreinoNullableRelationFilter, TreinoWhereInput> | null
  }, "id" | "cpf" | "email" | "tel">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tel?: SortOrder
    emerg?: SortOrder
    genero?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    mensalidade?: SortOrder
    planoId?: SortOrderInput | SortOrder
    entradaId?: SortOrderInput | SortOrder
    treinoId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    cpf?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    tel?: StringWithAggregatesFilter<"User"> | string
    emerg?: StringWithAggregatesFilter<"User"> | string
    genero?: StringNullableWithAggregatesFilter<"User"> | string | null
    active?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    mensalidade?: StringWithAggregatesFilter<"User"> | string
    planoId?: StringNullableWithAggregatesFilter<"User"> | string | null
    entradaId?: StringNullableWithAggregatesFilter<"User"> | string | null
    treinoId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type PlanoWhereInput = {
    AND?: PlanoWhereInput | PlanoWhereInput[]
    OR?: PlanoWhereInput[]
    NOT?: PlanoWhereInput | PlanoWhereInput[]
    id?: StringFilter<"Plano"> | string
    name?: StringFilter<"Plano"> | string
    value?: StringFilter<"Plano"> | string
    duration?: StringFilter<"Plano"> | string
    qtd?: IntNullableFilter<"Plano"> | number | null
    user?: UserListRelationFilter
  }

  export type PlanoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    duration?: SortOrder
    qtd?: SortOrderInput | SortOrder
    user?: UserOrderByRelationAggregateInput
  }

  export type PlanoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanoWhereInput | PlanoWhereInput[]
    OR?: PlanoWhereInput[]
    NOT?: PlanoWhereInput | PlanoWhereInput[]
    name?: StringFilter<"Plano"> | string
    value?: StringFilter<"Plano"> | string
    duration?: StringFilter<"Plano"> | string
    qtd?: IntNullableFilter<"Plano"> | number | null
    user?: UserListRelationFilter
  }, "id">

  export type PlanoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    duration?: SortOrder
    qtd?: SortOrderInput | SortOrder
    _count?: PlanoCountOrderByAggregateInput
    _avg?: PlanoAvgOrderByAggregateInput
    _max?: PlanoMaxOrderByAggregateInput
    _min?: PlanoMinOrderByAggregateInput
    _sum?: PlanoSumOrderByAggregateInput
  }

  export type PlanoScalarWhereWithAggregatesInput = {
    AND?: PlanoScalarWhereWithAggregatesInput | PlanoScalarWhereWithAggregatesInput[]
    OR?: PlanoScalarWhereWithAggregatesInput[]
    NOT?: PlanoScalarWhereWithAggregatesInput | PlanoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Plano"> | string
    name?: StringWithAggregatesFilter<"Plano"> | string
    value?: StringWithAggregatesFilter<"Plano"> | string
    duration?: StringWithAggregatesFilter<"Plano"> | string
    qtd?: IntNullableWithAggregatesFilter<"Plano"> | number | null
  }

  export type CaixaWhereInput = {
    AND?: CaixaWhereInput | CaixaWhereInput[]
    OR?: CaixaWhereInput[]
    NOT?: CaixaWhereInput | CaixaWhereInput[]
    id?: StringFilter<"Caixa"> | string
    name?: IntFilter<"Caixa"> | number
    aplicativo?: IntNullableFilter<"Caixa"> | number | null
    pix?: IntNullableFilter<"Caixa"> | number | null
    dinheiro?: IntNullableFilter<"Caixa"> | number | null
  }

  export type CaixaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    aplicativo?: SortOrderInput | SortOrder
    pix?: SortOrderInput | SortOrder
    dinheiro?: SortOrderInput | SortOrder
  }

  export type CaixaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: number
    AND?: CaixaWhereInput | CaixaWhereInput[]
    OR?: CaixaWhereInput[]
    NOT?: CaixaWhereInput | CaixaWhereInput[]
    aplicativo?: IntNullableFilter<"Caixa"> | number | null
    pix?: IntNullableFilter<"Caixa"> | number | null
    dinheiro?: IntNullableFilter<"Caixa"> | number | null
  }, "id" | "name">

  export type CaixaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    aplicativo?: SortOrderInput | SortOrder
    pix?: SortOrderInput | SortOrder
    dinheiro?: SortOrderInput | SortOrder
    _count?: CaixaCountOrderByAggregateInput
    _avg?: CaixaAvgOrderByAggregateInput
    _max?: CaixaMaxOrderByAggregateInput
    _min?: CaixaMinOrderByAggregateInput
    _sum?: CaixaSumOrderByAggregateInput
  }

  export type CaixaScalarWhereWithAggregatesInput = {
    AND?: CaixaScalarWhereWithAggregatesInput | CaixaScalarWhereWithAggregatesInput[]
    OR?: CaixaScalarWhereWithAggregatesInput[]
    NOT?: CaixaScalarWhereWithAggregatesInput | CaixaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Caixa"> | string
    name?: IntWithAggregatesFilter<"Caixa"> | number
    aplicativo?: IntNullableWithAggregatesFilter<"Caixa"> | number | null
    pix?: IntNullableWithAggregatesFilter<"Caixa"> | number | null
    dinheiro?: IntNullableWithAggregatesFilter<"Caixa"> | number | null
  }

  export type EntradaWhereInput = {
    AND?: EntradaWhereInput | EntradaWhereInput[]
    OR?: EntradaWhereInput[]
    NOT?: EntradaWhereInput | EntradaWhereInput[]
    id?: StringFilter<"Entrada"> | string
    name?: StringFilter<"Entrada"> | string
    method?: StringFilter<"Entrada"> | string
    date?: StringFilter<"Entrada"> | string
    month?: IntNullableFilter<"Entrada"> | number | null
    user?: UserListRelationFilter
  }

  export type EntradaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    method?: SortOrder
    date?: SortOrder
    month?: SortOrderInput | SortOrder
    user?: UserOrderByRelationAggregateInput
  }

  export type EntradaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EntradaWhereInput | EntradaWhereInput[]
    OR?: EntradaWhereInput[]
    NOT?: EntradaWhereInput | EntradaWhereInput[]
    name?: StringFilter<"Entrada"> | string
    method?: StringFilter<"Entrada"> | string
    date?: StringFilter<"Entrada"> | string
    month?: IntNullableFilter<"Entrada"> | number | null
    user?: UserListRelationFilter
  }, "id">

  export type EntradaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    method?: SortOrder
    date?: SortOrder
    month?: SortOrderInput | SortOrder
    _count?: EntradaCountOrderByAggregateInput
    _avg?: EntradaAvgOrderByAggregateInput
    _max?: EntradaMaxOrderByAggregateInput
    _min?: EntradaMinOrderByAggregateInput
    _sum?: EntradaSumOrderByAggregateInput
  }

  export type EntradaScalarWhereWithAggregatesInput = {
    AND?: EntradaScalarWhereWithAggregatesInput | EntradaScalarWhereWithAggregatesInput[]
    OR?: EntradaScalarWhereWithAggregatesInput[]
    NOT?: EntradaScalarWhereWithAggregatesInput | EntradaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Entrada"> | string
    name?: StringWithAggregatesFilter<"Entrada"> | string
    method?: StringWithAggregatesFilter<"Entrada"> | string
    date?: StringWithAggregatesFilter<"Entrada"> | string
    month?: IntNullableWithAggregatesFilter<"Entrada"> | number | null
  }

  export type ExercicioWhereInput = {
    AND?: ExercicioWhereInput | ExercicioWhereInput[]
    OR?: ExercicioWhereInput[]
    NOT?: ExercicioWhereInput | ExercicioWhereInput[]
    id?: StringFilter<"Exercicio"> | string
    name?: StringFilter<"Exercicio"> | string
    desc?: StringFilter<"Exercicio"> | string
    treino?: TreinoListRelationFilter
  }

  export type ExercicioOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    treino?: TreinoOrderByRelationAggregateInput
  }

  export type ExercicioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ExercicioWhereInput | ExercicioWhereInput[]
    OR?: ExercicioWhereInput[]
    NOT?: ExercicioWhereInput | ExercicioWhereInput[]
    desc?: StringFilter<"Exercicio"> | string
    treino?: TreinoListRelationFilter
  }, "id" | "name">

  export type ExercicioOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
    _count?: ExercicioCountOrderByAggregateInput
    _max?: ExercicioMaxOrderByAggregateInput
    _min?: ExercicioMinOrderByAggregateInput
  }

  export type ExercicioScalarWhereWithAggregatesInput = {
    AND?: ExercicioScalarWhereWithAggregatesInput | ExercicioScalarWhereWithAggregatesInput[]
    OR?: ExercicioScalarWhereWithAggregatesInput[]
    NOT?: ExercicioScalarWhereWithAggregatesInput | ExercicioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercicio"> | string
    name?: StringWithAggregatesFilter<"Exercicio"> | string
    desc?: StringWithAggregatesFilter<"Exercicio"> | string
  }

  export type TreinoWhereInput = {
    AND?: TreinoWhereInput | TreinoWhereInput[]
    OR?: TreinoWhereInput[]
    NOT?: TreinoWhereInput | TreinoWhereInput[]
    id?: StringFilter<"Treino"> | string
    name?: StringFilter<"Treino"> | string
    exercicioId?: StringNullableFilter<"Treino"> | string | null
    user?: UserListRelationFilter
    exercicio?: XOR<ExercicioNullableRelationFilter, ExercicioWhereInput> | null
  }

  export type TreinoOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    exercicioId?: SortOrderInput | SortOrder
    user?: UserOrderByRelationAggregateInput
    exercicio?: ExercicioOrderByWithRelationInput
  }

  export type TreinoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TreinoWhereInput | TreinoWhereInput[]
    OR?: TreinoWhereInput[]
    NOT?: TreinoWhereInput | TreinoWhereInput[]
    exercicioId?: StringNullableFilter<"Treino"> | string | null
    user?: UserListRelationFilter
    exercicio?: XOR<ExercicioNullableRelationFilter, ExercicioWhereInput> | null
  }, "id" | "name">

  export type TreinoOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    exercicioId?: SortOrderInput | SortOrder
    _count?: TreinoCountOrderByAggregateInput
    _max?: TreinoMaxOrderByAggregateInput
    _min?: TreinoMinOrderByAggregateInput
  }

  export type TreinoScalarWhereWithAggregatesInput = {
    AND?: TreinoScalarWhereWithAggregatesInput | TreinoScalarWhereWithAggregatesInput[]
    OR?: TreinoScalarWhereWithAggregatesInput[]
    NOT?: TreinoScalarWhereWithAggregatesInput | TreinoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Treino"> | string
    name?: StringWithAggregatesFilter<"Treino"> | string
    exercicioId?: StringNullableWithAggregatesFilter<"Treino"> | string | null
  }

  export type AdmCreateInput = {
    id?: string
    name: string
    email: string
  }

  export type AdmUncheckedCreateInput = {
    id?: string
    name: string
    email: string
  }

  export type AdmUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type AdmUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type AdmCreateManyInput = {
    id?: string
    name: string
    email: string
  }

  export type AdmUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type AdmUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    plano?: PlanoCreateNestedOneWithoutUserInput
    entrada?: EntradaCreateNestedOneWithoutUserInput
    treino?: TreinoCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    planoId?: string | null
    entradaId?: string | null
    treinoId?: string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    plano?: PlanoUpdateOneWithoutUserNestedInput
    entrada?: EntradaUpdateOneWithoutUserNestedInput
    treino?: TreinoUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    planoId?: NullableStringFieldUpdateOperationsInput | string | null
    entradaId?: NullableStringFieldUpdateOperationsInput | string | null
    treinoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    planoId?: string | null
    entradaId?: string | null
    treinoId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    planoId?: NullableStringFieldUpdateOperationsInput | string | null
    entradaId?: NullableStringFieldUpdateOperationsInput | string | null
    treinoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanoCreateInput = {
    id?: string
    name: string
    value: string
    duration: string
    qtd?: number | null
    user?: UserCreateNestedManyWithoutPlanoInput
  }

  export type PlanoUncheckedCreateInput = {
    id?: string
    name: string
    value: string
    duration: string
    qtd?: number | null
    user?: UserUncheckedCreateNestedManyWithoutPlanoInput
  }

  export type PlanoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    qtd?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateManyWithoutPlanoNestedInput
  }

  export type PlanoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    qtd?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUncheckedUpdateManyWithoutPlanoNestedInput
  }

  export type PlanoCreateManyInput = {
    id?: string
    name: string
    value: string
    duration: string
    qtd?: number | null
  }

  export type PlanoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    qtd?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlanoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    qtd?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaixaCreateInput = {
    id?: string
    name: number
    aplicativo?: number | null
    pix?: number | null
    dinheiro?: number | null
  }

  export type CaixaUncheckedCreateInput = {
    id?: string
    name: number
    aplicativo?: number | null
    pix?: number | null
    dinheiro?: number | null
  }

  export type CaixaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: IntFieldUpdateOperationsInput | number
    aplicativo?: NullableIntFieldUpdateOperationsInput | number | null
    pix?: NullableIntFieldUpdateOperationsInput | number | null
    dinheiro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaixaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: IntFieldUpdateOperationsInput | number
    aplicativo?: NullableIntFieldUpdateOperationsInput | number | null
    pix?: NullableIntFieldUpdateOperationsInput | number | null
    dinheiro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaixaCreateManyInput = {
    id?: string
    name: number
    aplicativo?: number | null
    pix?: number | null
    dinheiro?: number | null
  }

  export type CaixaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: IntFieldUpdateOperationsInput | number
    aplicativo?: NullableIntFieldUpdateOperationsInput | number | null
    pix?: NullableIntFieldUpdateOperationsInput | number | null
    dinheiro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CaixaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: IntFieldUpdateOperationsInput | number
    aplicativo?: NullableIntFieldUpdateOperationsInput | number | null
    pix?: NullableIntFieldUpdateOperationsInput | number | null
    dinheiro?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EntradaCreateInput = {
    id?: string
    name: string
    method: string
    date: string
    month?: number | null
    user?: UserCreateNestedManyWithoutEntradaInput
  }

  export type EntradaUncheckedCreateInput = {
    id?: string
    name: string
    method: string
    date: string
    month?: number | null
    user?: UserUncheckedCreateNestedManyWithoutEntradaInput
  }

  export type EntradaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    month?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateManyWithoutEntradaNestedInput
  }

  export type EntradaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    month?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUncheckedUpdateManyWithoutEntradaNestedInput
  }

  export type EntradaCreateManyInput = {
    id?: string
    name: string
    method: string
    date: string
    month?: number | null
  }

  export type EntradaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    month?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EntradaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    month?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExercicioCreateInput = {
    id?: string
    name: string
    desc: string
    treino?: TreinoCreateNestedManyWithoutExercicioInput
  }

  export type ExercicioUncheckedCreateInput = {
    id?: string
    name: string
    desc: string
    treino?: TreinoUncheckedCreateNestedManyWithoutExercicioInput
  }

  export type ExercicioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    treino?: TreinoUpdateManyWithoutExercicioNestedInput
  }

  export type ExercicioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    treino?: TreinoUncheckedUpdateManyWithoutExercicioNestedInput
  }

  export type ExercicioCreateManyInput = {
    id?: string
    name: string
    desc: string
  }

  export type ExercicioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
  }

  export type ExercicioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
  }

  export type TreinoCreateInput = {
    id?: string
    name: string
    user?: UserCreateNestedManyWithoutTreinoInput
    exercicio?: ExercicioCreateNestedOneWithoutTreinoInput
  }

  export type TreinoUncheckedCreateInput = {
    id?: string
    name: string
    exercicioId?: string | null
    user?: UserUncheckedCreateNestedManyWithoutTreinoInput
  }

  export type TreinoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateManyWithoutTreinoNestedInput
    exercicio?: ExercicioUpdateOneWithoutTreinoNestedInput
  }

  export type TreinoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exercicioId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUncheckedUpdateManyWithoutTreinoNestedInput
  }

  export type TreinoCreateManyInput = {
    id?: string
    name: string
    exercicioId?: string | null
  }

  export type TreinoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TreinoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exercicioId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AdmCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type AdmMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type AdmMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type PlanoNullableRelationFilter = {
    is?: PlanoWhereInput | null
    isNot?: PlanoWhereInput | null
  }

  export type EntradaNullableRelationFilter = {
    is?: EntradaWhereInput | null
    isNot?: EntradaWhereInput | null
  }

  export type TreinoNullableRelationFilter = {
    is?: TreinoWhereInput | null
    isNot?: TreinoWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tel?: SortOrder
    emerg?: SortOrder
    genero?: SortOrder
    active?: SortOrder
    mensalidade?: SortOrder
    planoId?: SortOrder
    entradaId?: SortOrder
    treinoId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tel?: SortOrder
    emerg?: SortOrder
    genero?: SortOrder
    active?: SortOrder
    mensalidade?: SortOrder
    planoId?: SortOrder
    entradaId?: SortOrder
    treinoId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tel?: SortOrder
    emerg?: SortOrder
    genero?: SortOrder
    active?: SortOrder
    mensalidade?: SortOrder
    planoId?: SortOrder
    entradaId?: SortOrder
    treinoId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    duration?: SortOrder
    qtd?: SortOrder
  }

  export type PlanoAvgOrderByAggregateInput = {
    qtd?: SortOrder
  }

  export type PlanoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    duration?: SortOrder
    qtd?: SortOrder
  }

  export type PlanoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    duration?: SortOrder
    qtd?: SortOrder
  }

  export type PlanoSumOrderByAggregateInput = {
    qtd?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CaixaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    aplicativo?: SortOrder
    pix?: SortOrder
    dinheiro?: SortOrder
  }

  export type CaixaAvgOrderByAggregateInput = {
    name?: SortOrder
    aplicativo?: SortOrder
    pix?: SortOrder
    dinheiro?: SortOrder
  }

  export type CaixaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    aplicativo?: SortOrder
    pix?: SortOrder
    dinheiro?: SortOrder
  }

  export type CaixaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    aplicativo?: SortOrder
    pix?: SortOrder
    dinheiro?: SortOrder
  }

  export type CaixaSumOrderByAggregateInput = {
    name?: SortOrder
    aplicativo?: SortOrder
    pix?: SortOrder
    dinheiro?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EntradaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    method?: SortOrder
    date?: SortOrder
    month?: SortOrder
  }

  export type EntradaAvgOrderByAggregateInput = {
    month?: SortOrder
  }

  export type EntradaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    method?: SortOrder
    date?: SortOrder
    month?: SortOrder
  }

  export type EntradaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    method?: SortOrder
    date?: SortOrder
    month?: SortOrder
  }

  export type EntradaSumOrderByAggregateInput = {
    month?: SortOrder
  }

  export type TreinoListRelationFilter = {
    every?: TreinoWhereInput
    some?: TreinoWhereInput
    none?: TreinoWhereInput
  }

  export type TreinoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExercicioCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
  }

  export type ExercicioMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
  }

  export type ExercicioMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    desc?: SortOrder
  }

  export type ExercicioNullableRelationFilter = {
    is?: ExercicioWhereInput | null
    isNot?: ExercicioWhereInput | null
  }

  export type TreinoCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    exercicioId?: SortOrder
  }

  export type TreinoMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    exercicioId?: SortOrder
  }

  export type TreinoMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    exercicioId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PlanoCreateNestedOneWithoutUserInput = {
    create?: XOR<PlanoCreateWithoutUserInput, PlanoUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlanoCreateOrConnectWithoutUserInput
    connect?: PlanoWhereUniqueInput
  }

  export type EntradaCreateNestedOneWithoutUserInput = {
    create?: XOR<EntradaCreateWithoutUserInput, EntradaUncheckedCreateWithoutUserInput>
    connectOrCreate?: EntradaCreateOrConnectWithoutUserInput
    connect?: EntradaWhereUniqueInput
  }

  export type TreinoCreateNestedOneWithoutUserInput = {
    create?: XOR<TreinoCreateWithoutUserInput, TreinoUncheckedCreateWithoutUserInput>
    connectOrCreate?: TreinoCreateOrConnectWithoutUserInput
    connect?: TreinoWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type PlanoUpdateOneWithoutUserNestedInput = {
    create?: XOR<PlanoCreateWithoutUserInput, PlanoUncheckedCreateWithoutUserInput>
    connectOrCreate?: PlanoCreateOrConnectWithoutUserInput
    upsert?: PlanoUpsertWithoutUserInput
    disconnect?: PlanoWhereInput | boolean
    delete?: PlanoWhereInput | boolean
    connect?: PlanoWhereUniqueInput
    update?: XOR<XOR<PlanoUpdateToOneWithWhereWithoutUserInput, PlanoUpdateWithoutUserInput>, PlanoUncheckedUpdateWithoutUserInput>
  }

  export type EntradaUpdateOneWithoutUserNestedInput = {
    create?: XOR<EntradaCreateWithoutUserInput, EntradaUncheckedCreateWithoutUserInput>
    connectOrCreate?: EntradaCreateOrConnectWithoutUserInput
    upsert?: EntradaUpsertWithoutUserInput
    disconnect?: EntradaWhereInput | boolean
    delete?: EntradaWhereInput | boolean
    connect?: EntradaWhereUniqueInput
    update?: XOR<XOR<EntradaUpdateToOneWithWhereWithoutUserInput, EntradaUpdateWithoutUserInput>, EntradaUncheckedUpdateWithoutUserInput>
  }

  export type TreinoUpdateOneWithoutUserNestedInput = {
    create?: XOR<TreinoCreateWithoutUserInput, TreinoUncheckedCreateWithoutUserInput>
    connectOrCreate?: TreinoCreateOrConnectWithoutUserInput
    upsert?: TreinoUpsertWithoutUserInput
    disconnect?: TreinoWhereInput | boolean
    delete?: TreinoWhereInput | boolean
    connect?: TreinoWhereUniqueInput
    update?: XOR<XOR<TreinoUpdateToOneWithWhereWithoutUserInput, TreinoUpdateWithoutUserInput>, TreinoUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedManyWithoutPlanoInput = {
    create?: XOR<UserCreateWithoutPlanoInput, UserUncheckedCreateWithoutPlanoInput> | UserCreateWithoutPlanoInput[] | UserUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanoInput | UserCreateOrConnectWithoutPlanoInput[]
    createMany?: UserCreateManyPlanoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPlanoInput = {
    create?: XOR<UserCreateWithoutPlanoInput, UserUncheckedCreateWithoutPlanoInput> | UserCreateWithoutPlanoInput[] | UserUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanoInput | UserCreateOrConnectWithoutPlanoInput[]
    createMany?: UserCreateManyPlanoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateManyWithoutPlanoNestedInput = {
    create?: XOR<UserCreateWithoutPlanoInput, UserUncheckedCreateWithoutPlanoInput> | UserCreateWithoutPlanoInput[] | UserUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanoInput | UserCreateOrConnectWithoutPlanoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPlanoInput | UserUpsertWithWhereUniqueWithoutPlanoInput[]
    createMany?: UserCreateManyPlanoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPlanoInput | UserUpdateWithWhereUniqueWithoutPlanoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPlanoInput | UserUpdateManyWithWhereWithoutPlanoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPlanoNestedInput = {
    create?: XOR<UserCreateWithoutPlanoInput, UserUncheckedCreateWithoutPlanoInput> | UserCreateWithoutPlanoInput[] | UserUncheckedCreateWithoutPlanoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanoInput | UserCreateOrConnectWithoutPlanoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPlanoInput | UserUpsertWithWhereUniqueWithoutPlanoInput[]
    createMany?: UserCreateManyPlanoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPlanoInput | UserUpdateWithWhereUniqueWithoutPlanoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPlanoInput | UserUpdateManyWithWhereWithoutPlanoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedManyWithoutEntradaInput = {
    create?: XOR<UserCreateWithoutEntradaInput, UserUncheckedCreateWithoutEntradaInput> | UserCreateWithoutEntradaInput[] | UserUncheckedCreateWithoutEntradaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntradaInput | UserCreateOrConnectWithoutEntradaInput[]
    createMany?: UserCreateManyEntradaInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutEntradaInput = {
    create?: XOR<UserCreateWithoutEntradaInput, UserUncheckedCreateWithoutEntradaInput> | UserCreateWithoutEntradaInput[] | UserUncheckedCreateWithoutEntradaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntradaInput | UserCreateOrConnectWithoutEntradaInput[]
    createMany?: UserCreateManyEntradaInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutEntradaNestedInput = {
    create?: XOR<UserCreateWithoutEntradaInput, UserUncheckedCreateWithoutEntradaInput> | UserCreateWithoutEntradaInput[] | UserUncheckedCreateWithoutEntradaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntradaInput | UserCreateOrConnectWithoutEntradaInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEntradaInput | UserUpsertWithWhereUniqueWithoutEntradaInput[]
    createMany?: UserCreateManyEntradaInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEntradaInput | UserUpdateWithWhereUniqueWithoutEntradaInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEntradaInput | UserUpdateManyWithWhereWithoutEntradaInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutEntradaNestedInput = {
    create?: XOR<UserCreateWithoutEntradaInput, UserUncheckedCreateWithoutEntradaInput> | UserCreateWithoutEntradaInput[] | UserUncheckedCreateWithoutEntradaInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntradaInput | UserCreateOrConnectWithoutEntradaInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEntradaInput | UserUpsertWithWhereUniqueWithoutEntradaInput[]
    createMany?: UserCreateManyEntradaInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEntradaInput | UserUpdateWithWhereUniqueWithoutEntradaInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEntradaInput | UserUpdateManyWithWhereWithoutEntradaInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TreinoCreateNestedManyWithoutExercicioInput = {
    create?: XOR<TreinoCreateWithoutExercicioInput, TreinoUncheckedCreateWithoutExercicioInput> | TreinoCreateWithoutExercicioInput[] | TreinoUncheckedCreateWithoutExercicioInput[]
    connectOrCreate?: TreinoCreateOrConnectWithoutExercicioInput | TreinoCreateOrConnectWithoutExercicioInput[]
    createMany?: TreinoCreateManyExercicioInputEnvelope
    connect?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
  }

  export type TreinoUncheckedCreateNestedManyWithoutExercicioInput = {
    create?: XOR<TreinoCreateWithoutExercicioInput, TreinoUncheckedCreateWithoutExercicioInput> | TreinoCreateWithoutExercicioInput[] | TreinoUncheckedCreateWithoutExercicioInput[]
    connectOrCreate?: TreinoCreateOrConnectWithoutExercicioInput | TreinoCreateOrConnectWithoutExercicioInput[]
    createMany?: TreinoCreateManyExercicioInputEnvelope
    connect?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
  }

  export type TreinoUpdateManyWithoutExercicioNestedInput = {
    create?: XOR<TreinoCreateWithoutExercicioInput, TreinoUncheckedCreateWithoutExercicioInput> | TreinoCreateWithoutExercicioInput[] | TreinoUncheckedCreateWithoutExercicioInput[]
    connectOrCreate?: TreinoCreateOrConnectWithoutExercicioInput | TreinoCreateOrConnectWithoutExercicioInput[]
    upsert?: TreinoUpsertWithWhereUniqueWithoutExercicioInput | TreinoUpsertWithWhereUniqueWithoutExercicioInput[]
    createMany?: TreinoCreateManyExercicioInputEnvelope
    set?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    disconnect?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    delete?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    connect?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    update?: TreinoUpdateWithWhereUniqueWithoutExercicioInput | TreinoUpdateWithWhereUniqueWithoutExercicioInput[]
    updateMany?: TreinoUpdateManyWithWhereWithoutExercicioInput | TreinoUpdateManyWithWhereWithoutExercicioInput[]
    deleteMany?: TreinoScalarWhereInput | TreinoScalarWhereInput[]
  }

  export type TreinoUncheckedUpdateManyWithoutExercicioNestedInput = {
    create?: XOR<TreinoCreateWithoutExercicioInput, TreinoUncheckedCreateWithoutExercicioInput> | TreinoCreateWithoutExercicioInput[] | TreinoUncheckedCreateWithoutExercicioInput[]
    connectOrCreate?: TreinoCreateOrConnectWithoutExercicioInput | TreinoCreateOrConnectWithoutExercicioInput[]
    upsert?: TreinoUpsertWithWhereUniqueWithoutExercicioInput | TreinoUpsertWithWhereUniqueWithoutExercicioInput[]
    createMany?: TreinoCreateManyExercicioInputEnvelope
    set?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    disconnect?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    delete?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    connect?: TreinoWhereUniqueInput | TreinoWhereUniqueInput[]
    update?: TreinoUpdateWithWhereUniqueWithoutExercicioInput | TreinoUpdateWithWhereUniqueWithoutExercicioInput[]
    updateMany?: TreinoUpdateManyWithWhereWithoutExercicioInput | TreinoUpdateManyWithWhereWithoutExercicioInput[]
    deleteMany?: TreinoScalarWhereInput | TreinoScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutTreinoInput = {
    create?: XOR<UserCreateWithoutTreinoInput, UserUncheckedCreateWithoutTreinoInput> | UserCreateWithoutTreinoInput[] | UserUncheckedCreateWithoutTreinoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTreinoInput | UserCreateOrConnectWithoutTreinoInput[]
    createMany?: UserCreateManyTreinoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ExercicioCreateNestedOneWithoutTreinoInput = {
    create?: XOR<ExercicioCreateWithoutTreinoInput, ExercicioUncheckedCreateWithoutTreinoInput>
    connectOrCreate?: ExercicioCreateOrConnectWithoutTreinoInput
    connect?: ExercicioWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutTreinoInput = {
    create?: XOR<UserCreateWithoutTreinoInput, UserUncheckedCreateWithoutTreinoInput> | UserCreateWithoutTreinoInput[] | UserUncheckedCreateWithoutTreinoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTreinoInput | UserCreateOrConnectWithoutTreinoInput[]
    createMany?: UserCreateManyTreinoInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutTreinoNestedInput = {
    create?: XOR<UserCreateWithoutTreinoInput, UserUncheckedCreateWithoutTreinoInput> | UserCreateWithoutTreinoInput[] | UserUncheckedCreateWithoutTreinoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTreinoInput | UserCreateOrConnectWithoutTreinoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTreinoInput | UserUpsertWithWhereUniqueWithoutTreinoInput[]
    createMany?: UserCreateManyTreinoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTreinoInput | UserUpdateWithWhereUniqueWithoutTreinoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTreinoInput | UserUpdateManyWithWhereWithoutTreinoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ExercicioUpdateOneWithoutTreinoNestedInput = {
    create?: XOR<ExercicioCreateWithoutTreinoInput, ExercicioUncheckedCreateWithoutTreinoInput>
    connectOrCreate?: ExercicioCreateOrConnectWithoutTreinoInput
    upsert?: ExercicioUpsertWithoutTreinoInput
    disconnect?: ExercicioWhereInput | boolean
    delete?: ExercicioWhereInput | boolean
    connect?: ExercicioWhereUniqueInput
    update?: XOR<XOR<ExercicioUpdateToOneWithWhereWithoutTreinoInput, ExercicioUpdateWithoutTreinoInput>, ExercicioUncheckedUpdateWithoutTreinoInput>
  }

  export type UserUncheckedUpdateManyWithoutTreinoNestedInput = {
    create?: XOR<UserCreateWithoutTreinoInput, UserUncheckedCreateWithoutTreinoInput> | UserCreateWithoutTreinoInput[] | UserUncheckedCreateWithoutTreinoInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTreinoInput | UserCreateOrConnectWithoutTreinoInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTreinoInput | UserUpsertWithWhereUniqueWithoutTreinoInput[]
    createMany?: UserCreateManyTreinoInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTreinoInput | UserUpdateWithWhereUniqueWithoutTreinoInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTreinoInput | UserUpdateManyWithWhereWithoutTreinoInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PlanoCreateWithoutUserInput = {
    id?: string
    name: string
    value: string
    duration: string
    qtd?: number | null
  }

  export type PlanoUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    value: string
    duration: string
    qtd?: number | null
  }

  export type PlanoCreateOrConnectWithoutUserInput = {
    where: PlanoWhereUniqueInput
    create: XOR<PlanoCreateWithoutUserInput, PlanoUncheckedCreateWithoutUserInput>
  }

  export type EntradaCreateWithoutUserInput = {
    id?: string
    name: string
    method: string
    date: string
    month?: number | null
  }

  export type EntradaUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    method: string
    date: string
    month?: number | null
  }

  export type EntradaCreateOrConnectWithoutUserInput = {
    where: EntradaWhereUniqueInput
    create: XOR<EntradaCreateWithoutUserInput, EntradaUncheckedCreateWithoutUserInput>
  }

  export type TreinoCreateWithoutUserInput = {
    id?: string
    name: string
    exercicio?: ExercicioCreateNestedOneWithoutTreinoInput
  }

  export type TreinoUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    exercicioId?: string | null
  }

  export type TreinoCreateOrConnectWithoutUserInput = {
    where: TreinoWhereUniqueInput
    create: XOR<TreinoCreateWithoutUserInput, TreinoUncheckedCreateWithoutUserInput>
  }

  export type PlanoUpsertWithoutUserInput = {
    update: XOR<PlanoUpdateWithoutUserInput, PlanoUncheckedUpdateWithoutUserInput>
    create: XOR<PlanoCreateWithoutUserInput, PlanoUncheckedCreateWithoutUserInput>
    where?: PlanoWhereInput
  }

  export type PlanoUpdateToOneWithWhereWithoutUserInput = {
    where?: PlanoWhereInput
    data: XOR<PlanoUpdateWithoutUserInput, PlanoUncheckedUpdateWithoutUserInput>
  }

  export type PlanoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    qtd?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlanoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    qtd?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EntradaUpsertWithoutUserInput = {
    update: XOR<EntradaUpdateWithoutUserInput, EntradaUncheckedUpdateWithoutUserInput>
    create: XOR<EntradaCreateWithoutUserInput, EntradaUncheckedCreateWithoutUserInput>
    where?: EntradaWhereInput
  }

  export type EntradaUpdateToOneWithWhereWithoutUserInput = {
    where?: EntradaWhereInput
    data: XOR<EntradaUpdateWithoutUserInput, EntradaUncheckedUpdateWithoutUserInput>
  }

  export type EntradaUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    month?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EntradaUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    month?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TreinoUpsertWithoutUserInput = {
    update: XOR<TreinoUpdateWithoutUserInput, TreinoUncheckedUpdateWithoutUserInput>
    create: XOR<TreinoCreateWithoutUserInput, TreinoUncheckedCreateWithoutUserInput>
    where?: TreinoWhereInput
  }

  export type TreinoUpdateToOneWithWhereWithoutUserInput = {
    where?: TreinoWhereInput
    data: XOR<TreinoUpdateWithoutUserInput, TreinoUncheckedUpdateWithoutUserInput>
  }

  export type TreinoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exercicio?: ExercicioUpdateOneWithoutTreinoNestedInput
  }

  export type TreinoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exercicioId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutPlanoInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    entrada?: EntradaCreateNestedOneWithoutUserInput
    treino?: TreinoCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPlanoInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    entradaId?: string | null
    treinoId?: string | null
  }

  export type UserCreateOrConnectWithoutPlanoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlanoInput, UserUncheckedCreateWithoutPlanoInput>
  }

  export type UserCreateManyPlanoInputEnvelope = {
    data: UserCreateManyPlanoInput | UserCreateManyPlanoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutPlanoInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPlanoInput, UserUncheckedUpdateWithoutPlanoInput>
    create: XOR<UserCreateWithoutPlanoInput, UserUncheckedCreateWithoutPlanoInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPlanoInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPlanoInput, UserUncheckedUpdateWithoutPlanoInput>
  }

  export type UserUpdateManyWithWhereWithoutPlanoInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPlanoInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    tel?: StringFilter<"User"> | string
    emerg?: StringFilter<"User"> | string
    genero?: StringNullableFilter<"User"> | string | null
    active?: BoolNullableFilter<"User"> | boolean | null
    mensalidade?: StringFilter<"User"> | string
    planoId?: StringNullableFilter<"User"> | string | null
    entradaId?: StringNullableFilter<"User"> | string | null
    treinoId?: StringNullableFilter<"User"> | string | null
  }

  export type UserCreateWithoutEntradaInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    plano?: PlanoCreateNestedOneWithoutUserInput
    treino?: TreinoCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEntradaInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    planoId?: string | null
    treinoId?: string | null
  }

  export type UserCreateOrConnectWithoutEntradaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEntradaInput, UserUncheckedCreateWithoutEntradaInput>
  }

  export type UserCreateManyEntradaInputEnvelope = {
    data: UserCreateManyEntradaInput | UserCreateManyEntradaInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutEntradaInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutEntradaInput, UserUncheckedUpdateWithoutEntradaInput>
    create: XOR<UserCreateWithoutEntradaInput, UserUncheckedCreateWithoutEntradaInput>
  }

  export type UserUpdateWithWhereUniqueWithoutEntradaInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutEntradaInput, UserUncheckedUpdateWithoutEntradaInput>
  }

  export type UserUpdateManyWithWhereWithoutEntradaInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutEntradaInput>
  }

  export type TreinoCreateWithoutExercicioInput = {
    id?: string
    name: string
    user?: UserCreateNestedManyWithoutTreinoInput
  }

  export type TreinoUncheckedCreateWithoutExercicioInput = {
    id?: string
    name: string
    user?: UserUncheckedCreateNestedManyWithoutTreinoInput
  }

  export type TreinoCreateOrConnectWithoutExercicioInput = {
    where: TreinoWhereUniqueInput
    create: XOR<TreinoCreateWithoutExercicioInput, TreinoUncheckedCreateWithoutExercicioInput>
  }

  export type TreinoCreateManyExercicioInputEnvelope = {
    data: TreinoCreateManyExercicioInput | TreinoCreateManyExercicioInput[]
    skipDuplicates?: boolean
  }

  export type TreinoUpsertWithWhereUniqueWithoutExercicioInput = {
    where: TreinoWhereUniqueInput
    update: XOR<TreinoUpdateWithoutExercicioInput, TreinoUncheckedUpdateWithoutExercicioInput>
    create: XOR<TreinoCreateWithoutExercicioInput, TreinoUncheckedCreateWithoutExercicioInput>
  }

  export type TreinoUpdateWithWhereUniqueWithoutExercicioInput = {
    where: TreinoWhereUniqueInput
    data: XOR<TreinoUpdateWithoutExercicioInput, TreinoUncheckedUpdateWithoutExercicioInput>
  }

  export type TreinoUpdateManyWithWhereWithoutExercicioInput = {
    where: TreinoScalarWhereInput
    data: XOR<TreinoUpdateManyMutationInput, TreinoUncheckedUpdateManyWithoutExercicioInput>
  }

  export type TreinoScalarWhereInput = {
    AND?: TreinoScalarWhereInput | TreinoScalarWhereInput[]
    OR?: TreinoScalarWhereInput[]
    NOT?: TreinoScalarWhereInput | TreinoScalarWhereInput[]
    id?: StringFilter<"Treino"> | string
    name?: StringFilter<"Treino"> | string
    exercicioId?: StringNullableFilter<"Treino"> | string | null
  }

  export type UserCreateWithoutTreinoInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    plano?: PlanoCreateNestedOneWithoutUserInput
    entrada?: EntradaCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTreinoInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    planoId?: string | null
    entradaId?: string | null
  }

  export type UserCreateOrConnectWithoutTreinoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTreinoInput, UserUncheckedCreateWithoutTreinoInput>
  }

  export type UserCreateManyTreinoInputEnvelope = {
    data: UserCreateManyTreinoInput | UserCreateManyTreinoInput[]
    skipDuplicates?: boolean
  }

  export type ExercicioCreateWithoutTreinoInput = {
    id?: string
    name: string
    desc: string
  }

  export type ExercicioUncheckedCreateWithoutTreinoInput = {
    id?: string
    name: string
    desc: string
  }

  export type ExercicioCreateOrConnectWithoutTreinoInput = {
    where: ExercicioWhereUniqueInput
    create: XOR<ExercicioCreateWithoutTreinoInput, ExercicioUncheckedCreateWithoutTreinoInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTreinoInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTreinoInput, UserUncheckedUpdateWithoutTreinoInput>
    create: XOR<UserCreateWithoutTreinoInput, UserUncheckedCreateWithoutTreinoInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTreinoInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTreinoInput, UserUncheckedUpdateWithoutTreinoInput>
  }

  export type UserUpdateManyWithWhereWithoutTreinoInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTreinoInput>
  }

  export type ExercicioUpsertWithoutTreinoInput = {
    update: XOR<ExercicioUpdateWithoutTreinoInput, ExercicioUncheckedUpdateWithoutTreinoInput>
    create: XOR<ExercicioCreateWithoutTreinoInput, ExercicioUncheckedCreateWithoutTreinoInput>
    where?: ExercicioWhereInput
  }

  export type ExercicioUpdateToOneWithWhereWithoutTreinoInput = {
    where?: ExercicioWhereInput
    data: XOR<ExercicioUpdateWithoutTreinoInput, ExercicioUncheckedUpdateWithoutTreinoInput>
  }

  export type ExercicioUpdateWithoutTreinoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
  }

  export type ExercicioUncheckedUpdateWithoutTreinoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyPlanoInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    entradaId?: string | null
    treinoId?: string | null
  }

  export type UserUpdateWithoutPlanoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    entrada?: EntradaUpdateOneWithoutUserNestedInput
    treino?: TreinoUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPlanoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    entradaId?: NullableStringFieldUpdateOperationsInput | string | null
    treinoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutPlanoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    entradaId?: NullableStringFieldUpdateOperationsInput | string | null
    treinoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyEntradaInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    planoId?: string | null
    treinoId?: string | null
  }

  export type UserUpdateWithoutEntradaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    plano?: PlanoUpdateOneWithoutUserNestedInput
    treino?: TreinoUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEntradaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    planoId?: NullableStringFieldUpdateOperationsInput | string | null
    treinoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutEntradaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    planoId?: NullableStringFieldUpdateOperationsInput | string | null
    treinoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TreinoCreateManyExercicioInput = {
    id?: string
    name: string
  }

  export type TreinoUpdateWithoutExercicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateManyWithoutTreinoNestedInput
  }

  export type TreinoUncheckedUpdateWithoutExercicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUncheckedUpdateManyWithoutTreinoNestedInput
  }

  export type TreinoUncheckedUpdateManyWithoutExercicioInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyTreinoInput = {
    id?: string
    name: string
    cpf: string
    email: string
    password: string
    tel: string
    emerg: string
    genero?: string | null
    active?: boolean | null
    mensalidade: string
    planoId?: string | null
    entradaId?: string | null
  }

  export type UserUpdateWithoutTreinoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    plano?: PlanoUpdateOneWithoutUserNestedInput
    entrada?: EntradaUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTreinoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    planoId?: NullableStringFieldUpdateOperationsInput | string | null
    entradaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutTreinoInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    emerg?: StringFieldUpdateOperationsInput | string
    genero?: NullableStringFieldUpdateOperationsInput | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    mensalidade?: StringFieldUpdateOperationsInput | string
    planoId?: NullableStringFieldUpdateOperationsInput | string | null
    entradaId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PlanoCountOutputTypeDefaultArgs instead
     */
    export type PlanoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntradaCountOutputTypeDefaultArgs instead
     */
    export type EntradaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntradaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExercicioCountOutputTypeDefaultArgs instead
     */
    export type ExercicioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExercicioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreinoCountOutputTypeDefaultArgs instead
     */
    export type TreinoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreinoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdmDefaultArgs instead
     */
    export type AdmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdmDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanoDefaultArgs instead
     */
    export type PlanoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaixaDefaultArgs instead
     */
    export type CaixaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaixaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EntradaDefaultArgs instead
     */
    export type EntradaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EntradaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExercicioDefaultArgs instead
     */
    export type ExercicioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExercicioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreinoDefaultArgs instead
     */
    export type TreinoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreinoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}